<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Etki Analizi Modern</title>
    <script type="text/javascript" src="https://unpkg.com/papaparse@5.5.2/papaparse.js" defer></script>
    <script src="https://unpkg.com/@yaireo/tagify@4.35.1/dist/tagify.js" defer></script>
    <script src="https://unpkg.com/@yaireo/tagify@4.35.1/dist/tagify.polyfills.min.js" defer></script>
    <link href="https://unpkg.com/@yaireo/tagify@4.35.1/dist/tagify.css" rel="stylesheet" type="text/css" />
    <script src="https://unpkg.com/cytoscape@3.32.0/dist/cytoscape.min.js" defer></script>
    <script src="https://unpkg.com/elkjs@0.10.0/lib/elk.bundled.js" defer></script>
    <script src="https://unpkg.com/cytoscape-elk@2.3.0/dist/cytoscape-elk.js" defer></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">

    <style type="text/css">
        * { box-sizing: border-box; margin: 0; padding: 0; }

        :root {
            --body-bg-light: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --body-bg-dark: linear-gradient(135deg, #232526 0%, #414345 100%);
            
            --header-bg-light: rgba(255, 255, 255, 0.85);
            --header-bg-dark: rgba(30, 30, 30, 0.85);
            --header-border-light: rgba(255, 255, 255, 0.2);
            --header-border-dark: rgba(60, 60, 60, 0.5);

            --controls-bg-light: rgba(255, 255, 255, 0.85);
            --controls-bg-dark: rgba(30, 30, 30, 0.85);
            --controls-border-light: rgba(255, 255, 255, 0.2);
            --controls-border-dark: rgba(60, 60, 60, 0.5);

            --control-group-bg-light: rgba(255, 255, 255, 0.7);
            --control-group-bg-dark: rgba(45, 45, 45, 0.7);
            --control-group-hover-bg-light: rgba(255, 255, 255, 0.9);
            --control-group-hover-bg-dark: rgba(55, 55, 55, 0.9);
            --control-group-border-light: rgba(255, 255, 255, 0.3);
            --control-group-border-dark: rgba(70, 70, 70, 0.5);
            
            --text-color-light: #495057;
            --text-color-dark: #e0e0e0;
            --text-muted-light: #6c757d;
            --text-muted-dark: #9e9e9e;
            --app-title-gradient-light: linear-gradient(135deg, #667eea, #764ba2);
            --app-title-gradient-dark: linear-gradient(135deg, #89f7fe, #66a6ff);
            --icon-color-light: #667eea;
            --icon-color-dark: #89f7fe;

            --tagify-border-light: rgba(102, 126, 234, 0.2);
            --tagify-border-dark: rgba(137, 247, 254, 0.3);
            --tagify-focus-border-light: #667eea;
            --tagify-focus-border-dark: #89f7fe;
            --tagify-bg-light: rgba(255, 255, 255, 0.9);
            --tagify-bg-dark: rgba(35, 35, 35, 0.9);
            --tagify-text-light: #495057;
            --tagify-text-dark: #e0e0e0; 
            
            --tagify-tag-bg-light: #ff0000;
            --tagify-tag-bg-dark: #ff0000; 
            --tagify-tag-text-light: rgb(255, 0, 0);
            --tagify-tag-text-dark: #ff0000;

            --tagify-dropdown-bg-light: rgba(255, 255, 255, 0.95);
            --tagify-dropdown-bg-dark: rgba(40, 40, 40, 0.95);
            --tagify-dropdown-item-hover-bg-light: rgba(102, 126, 234, 0.1);
            --tagify-dropdown-item-hover-bg-dark: rgba(137, 247, 254, 0.15);


            --btn-primary-bg-light: linear-gradient(135deg, #667eea, #764ba2);
            --btn-primary-bg-dark: linear-gradient(135deg, #89f7fe, #66a6ff);
            --btn-primary-text-light: white;
            --btn-primary-text-dark: #1a1a1a;
            --btn-primary-shadow-light: rgba(102, 126, 234, 0.3);
            --btn-primary-shadow-dark: rgba(137, 247, 254, 0.3);
            --btn-primary-hover-shadow-light: rgba(102, 126, 234, 0.4);
            --btn-primary-hover-shadow-dark: rgba(137, 247, 254, 0.4);
            --btn-disabled-bg-light: linear-gradient(135deg, #adb5bd, #868e96);
            --btn-disabled-bg-dark: linear-gradient(135deg, #4a4e52, #383c3f);
            
            --floating-btn-bg-light: rgba(255, 255, 255, 0.9);
            --floating-btn-bg-dark: rgba(45, 45, 45, 0.9);
            --floating-btn-color-light: #667eea;
            --floating-btn-color-dark: #89f7fe;
            --floating-btn-hover-bg-light: #667eea;
            --floating-btn-hover-bg-dark: #89f7fe;
            --floating-btn-hover-color-light: white;
            --floating-btn-hover-color-dark: #1a1a1a;

            --graph-container-bg-light: rgba(255, 255, 255, 0.9);
            --graph-container-bg-dark: rgba(25, 25, 25, 0.9);
            --graph-container-border-light: rgba(255, 255, 255, 0.3);
            --graph-container-border-dark: rgba(70, 70, 70, 0.5);

            --message-area-bg-light: rgba(255, 255, 255, 0.95);
            --message-area-bg-dark: rgba(40, 40, 40, 0.95);
            --message-area-text-light: #495057;
            --message-area-text-dark: #e0e0e0;
            --message-area-loading-light: #667eea;
            --message-area-loading-dark: #89f7fe;
            --message-area-error-light: #dc3545;
            --message-area-error-dark: #ff6b6b;

            --context-menu-bg-light: rgba(255, 255, 255, 0.95);
            --context-menu-bg-dark: rgba(40, 40, 40, 0.95);
            --context-menu-border-light: rgba(255, 255, 255, 0.3);
            --context-menu-border-dark: rgba(70, 70, 70, 0.5);
            --context-menu-text-light: #495057;
            --context-menu-text-dark: #e0e0e0;
            --context-menu-hover-bg-light: linear-gradient(135deg, #667eea, #764ba2);
            --context-menu-hover-bg-dark: linear-gradient(135deg, #89f7fe, #66a6ff);
            --context-menu-hover-text-light: white;
            --context-menu-hover-text-dark: #1a1a1a;
            --context-menu-hr-light: rgba(0, 0, 0, 0.1);
            --context-menu-hr-dark: rgba(255, 255, 255, 0.1);

            --stat-item-bg-light: rgba(255, 255, 255, 0.8);
            --stat-item-bg-dark: rgba(40, 40, 40, 0.8);
            --stat-number-color-light: #667eea;
            --stat-number-color-dark: #89f7fe;
            --stat-label-color-light: #6c757d;
            --stat-label-color-dark: #9e9e9e;

            /* Cytoscape Styles */
            --cy-node-bg-light: #667eea; 
            --cy-node-bg-dark: #58677c;
            --cy-node-gradient-light: #667eea #764ba2; 
            --cy-node-gradient-dark: #58677c #4a5568;
            --cy-node-gradient-direction-light: to-bottom-right;
            --cy-node-gradient-direction-dark: to-bottom-right;
            --cy-node-border-light: #5a6fd8; 
            --cy-node-border-dark: #7b8a8b;
            --cy-node-border-width-light: 2; 
            --cy-node-border-width-dark: 2;
            --cy-node-text-light: white; 
            --cy-node-text-dark: #f0f0f0; 
            --cy-node-font-size-light: 11px; 
            --cy-node-font-size-dark: 11px;
            --cy-node-font-weight-light: 600; 
            --cy-node-font-weight-dark: 600;
            --cy-node-border-radius-light: 8px;  /* DEĞİŞİKLİK: '8px' GERİ GETİRİLDİ */
            --cy-node-border-radius-dark: 8px; /* DEĞİŞİKLİK: '8px' GERİ GETİRİLDİ */
            --cy-node-text-shadow-blur-light: 0; /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-blur-dark: 0;  /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-color-light: rgba(0,0,0,0.2); /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-color-dark: rgba(0,0,0,0.5);  /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-offset-x-light: 0; /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-offset-x-dark: 0; /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-offset-y-light: 0; /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            --cy-node-text-shadow-offset-y-dark: 0; /* DEĞİŞİKLİK: GERİ GETİRİLDİ */
            
            --cy-stg-bg-light: #e9ecef; 
            --cy-stg-bg-dark: #4a5568;
            --cy-stg-gradient-light: #e9ecef #dee2e6; 
            --cy-stg-gradient-dark: #4a5568 #3b4452;
            --cy-stg-border-light: #adb5bd; 
            --cy-stg-border-dark: #6c757d;
            --cy-stg-text-light: #495057; 
            --cy-stg-text-dark: #f0f0f0; 
            
            --cy-selected-bg-light: #fff5f5; 
            --cy-selected-bg-dark: #7d4545;
            --cy-selected-gradient-light: #fff5f5 #ffe6e6; 
            --cy-selected-gradient-dark: #7d4545 #6b3d3d;
            --cy-selected-border-light: #dc3545; 
            --cy-selected-border-dark: #ff6b6b;
            --cy-selected-border-width-light: 3;
            --cy-selected-border-width-dark: 3;
            --cy-selected-text-light: #dc3545; 
            --cy-selected-text-dark: #ffcbdb;
            --cy-selected-overlay-color-light: #dc3545; 
            --cy-selected-overlay-color-dark: #ff6b6b;
            --cy-selected-overlay-opacity-light: 0.15;
            --cy-selected-overlay-opacity-dark: 0.15;
            --cy-selected-overlay-padding-light: 10;
            --cy-selected-overlay-padding-dark: 10;
            
            --cy-start-bg-light: #d4edda; 
            --cy-start-bg-dark: #3c7a4a;
            --cy-start-gradient-light: #d4edda #c3e6cb; 
            --cy-start-gradient-dark: #3c7a4a #2e5f38;
            --cy-start-border-light: #28a745; 
            --cy-start-border-dark: #4dff8f;
            --cy-start-border-width-light: 3;
            --cy-start-border-width-dark: 3;
            --cy-start-text-light: #155724; 
            --cy-start-text-dark: #c8f7d2;
            --cy-start-font-weight-light: bold; 
            --cy-start-font-weight-dark: bold;
            
            --cy-edge-line-light: #ced4da; 
            --cy-edge-line-dark: #6c757d;
            --cy-edge-width-light: 1.8;
            --cy-edge-width-dark: 1.8;
            --cy-edge-arrow-shape-light: triangle;
            --cy-edge-arrow-shape-dark: triangle;
            --cy-edge-arrow-color-light: #ced4da; 
            --cy-edge-arrow-color-dark: #6c757d;
            --cy-edge-arrow-scale-light: 1.1;
            --cy-edge-arrow-scale-dark: 1.1;
            --cy-edge-curve-style-light: bezier;
            --cy-edge-curve-style-dark: bezier;
            --cy-edge-control-point-step-light: 50;
            --cy-edge-control-point-step-dark: 50;
            --cy-edge-opacity-light: 0.7;
            --cy-edge-opacity-dark: 0.7;

            --cy-edge-highlighted-light: #dc3545; 
            --cy-edge-highlighted-dark: #ff6b6b;
            --cy-edge-highlighted-arrow-light: #dc3545; 
            --cy-edge-highlighted-arrow-dark: #ff6b6b;
            --cy-edge-highlighted-width-light: 3;
            --cy-edge-highlighted-width-dark: 3;

            --cy-edge-selected-line-light: #dc3545; 
            --cy-edge-selected-line-dark: #ff6b6b;
            --cy-edge-selected-arrow-light: #dc3545;
            --cy-edge-selected-arrow-dark: #ff6b6b;
            --cy-edge-selected-width-light: 3.5;
            --cy-edge-selected-width-dark: 3.5;
        }
        
        html, body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            width: 100%; height: 100%; 
            overflow: hidden; 
            background: var(--body-bg-light);
            transition: background 0.3s ease;
        }
        body.dark-mode { background: var(--body-bg-dark); }

        #main-container { 
            display: flex; flex-direction: column; height: 100%; 
            backdrop-filter: blur(10px) saturate(150%);
            background: rgba(255,255,255,0.05);
        }
        body.dark-mode #main-container { background: rgba(0,0,0,0.1); }


        #header {
            background: var(--header-bg-light);
            backdrop-filter: blur(20px) saturate(180%);
            border-bottom: 1px solid var(--header-border-light);
            padding: 20px 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: background 0.3s ease, border-color 0.3s ease;
            z-index: 100;
        }
        body.dark-mode #header { background: var(--header-bg-dark); border-bottom-color: var(--header-border-dark); }

        .header-content { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 20px; }
        .logo-section { display: flex; align-items: center; gap: 12px; }
        .logo-icon {
            width: 40px; height: 40px;
            background: var(--app-title-gradient-light);
            border-radius: 12px;
            display: flex; align-items: center; justify-content: center;
            color: white; font-size: 18px;
            box-shadow: 0 4px 15px var(--btn-primary-shadow-light);
        }
        body.dark-mode .logo-icon { background: var(--app-title-gradient-dark); box-shadow: 0 4px 15px var(--btn-primary-shadow-dark); color: var(--btn-primary-text-dark); }
        .app-title {
            font-size: 24px; font-weight: 700;
            background: var(--app-title-gradient-light);
            -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;
            margin: 0;
        }
        body.dark-mode .app-title { background: var(--app-title-gradient-dark); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; }
        .app-subtitle { font-size: 14px; color: var(--text-muted-light); margin: 0; margin-top: 2px; }
        body.dark-mode .app-subtitle { color: var(--text-muted-dark); }

        #controls { 
            background: var(--controls-bg-light);
            backdrop-filter: blur(20px) saturate(180%);
            border-bottom: 1px solid var(--controls-border-light);
            padding: 20px 30px; 
            display: flex; flex-wrap: wrap; align-items: center; gap: 20px; 
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: background 0.3s ease, border-color 0.3s ease;
            z-index: 99;
        }
        body.dark-mode #controls { background: var(--controls-bg-dark); border-bottom-color: var(--controls-border-dark); }

        .control-group { 
            display: flex; align-items: center; gap: 10px; 
            background: var(--control-group-bg-light);
            padding: 12px 18px; 
            border-radius: 12px; 
            border: 1px solid var(--control-group-border-light);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.03);
            transition: all 0.3s ease;
        }
        body.dark-mode .control-group { background: var(--control-group-bg-dark); border-color: var(--control-group-border-dark); }
        .control-group:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08); background: var(--control-group-hover-bg-light); }
        body.dark-mode .control-group:hover { background: var(--control-group-hover-bg-dark); }
        .control-group.input-group { flex-grow: 1; min-width: 300px; }
        .control-group label, .control-group span { 
            font-weight: 600; color: var(--text-color-light); margin-bottom: 0; white-space: nowrap;
            display: flex; align-items: center; gap: 8px; font-size: 0.95em;
        }
        body.dark-mode .control-group label, body.dark-mode .control-group span { color: var(--text-color-dark); }
        .control-group label i { color: var(--icon-color-light); }
        body.dark-mode .control-group label i { color: var(--icon-color-dark); }
        .control-group input[type="radio"] { 
            margin-right: 5px; margin-left: 10px; cursor: pointer;
            accent-color: var(--icon-color-light); transform: scale(1.1);
        }
        body.dark-mode .control-group input[type="radio"] { accent-color: var(--icon-color-dark); }
        
        .control-group .tagify { 
            min-width: 300px; border: 2px solid var(--tagify-border-light); border-radius: 10px; 
            background: var(--tagify-bg-light); transition: all 0.3s ease;
            color: var(--tagify-text-light);
        }
        body.dark-mode .control-group .tagify { border-color: var(--tagify-border-dark); background: var(--tagify-bg-dark); color: var(--tagify-text-dark); }
        
        .tagify__input { 
            color: var(--tagify-text-light) !important; 
            line-height: normal !important;
            padding-top: 0.2em;
            padding-bottom: 0.2em;
        }
        body.dark-mode .tagify__input { 
            color: var(--tagify-text-dark) !important;  
            line-height: normal !important;
            padding-top: 0.45em;
            padding-bottom: 0.45em;
        }
        .tagify .tagify__input:empty::before { 
            color: var(--text-muted-light);
        }
        body.dark-mode .tagify .tagify__input:empty::before {
             color: var(--text-muted-dark);
        }

        .tagify__tag { background-color: var(--tagify-tag-bg-light) !important; color: var(--tagify-tag-text-light) !important; border-radius: 6px !important;}
        body.dark-mode .tagify__tag { background-color: var(--tagify-tag-bg-dark) !important; color: var(--tagify-tag-text-dark) !important;}
        .tagify__tag > div::before { color: var(--tagify-tag-text-light) !important; }
        body.dark-mode .tagify__tag > div::before { color: var(--tagify-tag-text-dark) !important; }

        .control-group .tagify:focus-within { border-color: var(--tagify-focus-border-light); box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }
        body.dark-mode .control-group .tagify:focus-within { border-color: var(--tagify-focus-border-dark); box-shadow: 0 0 0 3px rgba(137, 247, 254, 0.1); }
        .tagify__dropdown { 
            z-index: 9999; border-radius: 12px; border: none;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15); backdrop-filter: blur(20px) saturate(180%);
            background: var(--tagify-dropdown-bg-light);
        }
        body.dark-mode .tagify__dropdown { background: var(--tagify-dropdown-bg-dark); }
        .tagify__dropdown__item { color: var(--tagify-text-light); padding: 0.6em 0.8em; }
        
        body.dark-mode .tagify__dropdown__item { 
            color: var(--cy-node-text-dark); 
        }
        
        .tagify__dropdown__item--active { background-color: var(--tagify-dropdown-item-hover-bg-light); color: var(--icon-color-light); }
        body.dark-mode .tagify__dropdown__item--active { background-color: var(--tagify-dropdown-item-hover-bg-dark); color: var(--icon-color-dark); }


        #generate-button, #reset-button-main { 
            padding: 12px 25px; font-size: 15px; font-weight: 600; cursor: pointer; 
            background: var(--btn-primary-bg-light); color: var(--btn-primary-text-light); 
            border: none; border-radius: 10px; transition: all 0.3s ease;
            display: flex; align-items: center; gap: 8px;
            box-shadow: 0 4px 15px var(--btn-primary-shadow-light);
        }
        body.dark-mode #generate-button, body.dark-mode #reset-button-main { background: var(--btn-primary-bg-dark); color: var(--btn-primary-text-dark); box-shadow: 0 4px 15px var(--btn-primary-shadow-dark);}
        #generate-button:hover:not(:disabled), #reset-button-main:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 8px 25px var(--btn-primary-hover-shadow-light); }
        body.dark-mode #generate-button:hover:not(:disabled), body.dark-mode #reset-button-main:hover:not(:disabled) { box-shadow: 0 8px 25px var(--btn-primary-hover-shadow-dark); }
        #generate-button:active:not(:disabled), #reset-button-main:active:not(:disabled) { transform: translateY(-1px); }
        #generate-button:disabled { background: var(--btn-disabled-bg-light); cursor: not-allowed; transform: none; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); opacity: 0.7; }
        body.dark-mode #generate-button:disabled { background: var(--btn-disabled-bg-dark); }


        .stats-panel { display: flex; gap: 15px; align-items: center; margin-left: auto; }
        .stat-item {
            display: flex; flex-direction: column; align-items: center;
            padding: 8px 12px; background: var(--stat-item-bg-light);
            border-radius: 10px; min-width: 60px;
            transition: background 0.3s ease;
        }
        body.dark-mode .stat-item { background: var(--stat-item-bg-dark); }
        .stat-number { font-size: 18px; font-weight: 700; color: var(--stat-number-color-light); }
        body.dark-mode .stat-number { color: var(--stat-number-color-dark); }
        .stat-label { font-size: 11px; color: var(--stat-label-color-light); text-transform: uppercase; letter-spacing: 0.5px; }
        body.dark-mode .stat-label { color: var(--stat-label-color-dark); }

        #graph-container { 
            flex-grow: 1; background: var(--graph-container-bg-light);
            backdrop-filter: blur(15px) saturate(150%); 
            position: relative; 
            min-height: 300px;
            margin: 0 20px 20px 20px; border-radius: 18px; 
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1); 
            border: 1px solid var(--graph-container-border-light);
            overflow: hidden;
            transition: background 0.3s ease, border-color 0.3s ease;
        }
        body.dark-mode #graph-container { background: var(--graph-container-bg-dark); border-color: var(--graph-container-border-dark); }

        #message-area { 
            position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); 
            font-size: 16px; color: var(--message-area-text-light); text-align: center; 
            background: var(--message-area-bg-light); backdrop-filter: blur(20px) saturate(180%);
            padding: 30px; border-radius: 16px; 
            box-shadow: 0 8px 35px rgba(0, 0, 0, 0.12);
            border: 1px solid var(--graph-container-border-light);
            display: block; max-width: 450px;
            transition: background 0.3s ease, color 0.3s ease, border-color 0.3s ease;
            z-index: 900; 
        }
        body.dark-mode #message-area { background: var(--message-area-bg-dark); color: var(--message-area-text-dark); border-color: var(--graph-container-border-dark); }
        #message-area.loading { color: var(--message-area-loading-light); font-weight: 600; }
        body.dark-mode #message-area.loading { color: var(--message-area-loading-dark); }
        #message-area.loading::after {
            content: ''; display: inline-block; width: 18px; height: 18px; margin-left: 10px;
            border: 2px solid var(--message-area-loading-light);
            border-radius: 50%; border-top-color: transparent;
            animation: spin 1s linear infinite; vertical-align: middle;
        }
        body.dark-mode #message-area.loading::after { border-color: var(--message-area-loading-dark); border-top-color: transparent; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        #message-area.error { color: var(--message-area-error-light); }
        body.dark-mode #message-area.error { color: var(--message-area-error-dark); }
        #message-area.info::before { 
             font-family: "Font Awesome 6 Free"; font-weight: 900; margin-right: 10px; 
             color: var(--message-area-loading-light);
        }
        body.dark-mode #message-area.info::before { color: var(--message-area-loading-dark); }
        #message-area.error::before { content: "\f071"; 
             font-family: "Font Awesome 6 Free"; font-weight: 900; margin-right: 10px; 
        }
        #message-area.hidden { display: none; }


        #context-menu { 
            position: absolute; background: var(--context-menu-bg-light);
            backdrop-filter: blur(20px) saturate(180%); border: 1px solid var(--context-menu-border-light);
            box-shadow: 0 8px 35px rgba(0, 0, 0, 0.18);
            padding: 8px 0; min-width: 280px; z-index: 10000; display: none; border-radius: 12px;
            transition: background 0.3s ease, border-color 0.3s ease;
        }
        body.dark-mode #context-menu { background: var(--context-menu-bg-dark); border-color: var(--context-menu-border-dark); }
        #context-menu button { 
            width: 100%; padding: 10px 18px; border: none; background: none; text-align: left; 
            cursor: pointer; font-size: 14px; font-weight: 500; color: var(--context-menu-text-light);
            transition: all 0.2s ease; display: flex; align-items: center; gap: 10px;
        }
        body.dark-mode #context-menu button { color: var(--context-menu-text-dark); }
        #context-menu button:hover { background: var(--context-menu-hover-bg-light); color: var(--context-menu-hover-text-light); }
        body.dark-mode #context-menu button:hover { background: var(--context-menu-hover-bg-dark); color: var(--context-menu-hover-text-dark); }
        #context-menu button i { width: 16px; text-align: center; }
        #context-menu hr { border: 0; border-top: 1px solid var(--context-menu-hr-light); margin: 8px 0; transition: border-color 0.3s ease;}
        body.dark-mode #context-menu hr { border-top-color: var(--context-menu-hr-dark); }

        .radio-group { display: flex; align-items: center; gap: 15px; }
        .radio-option {
            display: flex; align-items: center; gap: 8px; cursor: pointer;
            padding: 8px 10px; border-radius: 8px; transition: all 0.2s ease;
        }
        .radio-option:hover { background: rgba(102, 126, 234, 0.1); }
        body.dark-mode .radio-option:hover { background: rgba(137, 247, 254, 0.1); }

        .floating-controls {
            position: absolute; 
            top: 15px; 
            right: 35px; 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            z-index: 950; 
        }
        .floating-btn {
            width: 40px; height: 40px; border-radius: 50%; border: none;
            background: var(--floating-btn-bg-light); backdrop-filter: blur(10px) saturate(150%);
            color: var(--floating-btn-color-light); cursor: pointer;
            display: flex; align-items: center; justify-content: center;
            font-size: 16px; transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }
        body.dark-mode .floating-btn { background: var(--floating-btn-bg-dark); color: var(--floating-btn-color-dark); }
        .floating-btn:hover {
            transform: translateY(-2px) scale(1.05); box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
            background: var(--floating-btn-hover-bg-light); color: var(--floating-btn-hover-color-light);
        }
        body.dark-mode .floating-btn:hover { background: var(--floating-btn-hover-bg-dark); color: var(--floating-btn-hover-color-dark); }
        
        .theme-toggle-container { margin-left: auto; }

        ::-webkit-scrollbar { width: 8px; height: 8px;}
        ::-webkit-scrollbar-track { background: rgba(0, 0, 0, 0.05); border-radius: 4px; }
        body.dark-mode ::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.05); }
        ::-webkit-scrollbar-thumb { background: var(--icon-color-light); border-radius: 4px; opacity: 0.5; }
        body.dark-mode ::-webkit-scrollbar-thumb { background: var(--icon-color-dark); }
        ::-webkit-scrollbar-thumb:hover { opacity: 0.8; }

        @media (max-width: 1200px) {
            .stats-panel { margin-left: 0; }
            #controls { flex-direction: column; align-items: stretch; gap: 15px;}
            .control-group { width: 100%; }
            .theme-toggle-container { margin-left: 0; align-self: flex-end; }
        }
        @media (max-width: 768px) {
            #header { padding: 15px 20px; }
            .header-content { flex-direction: column; gap: 15px; align-items: flex-start; }
            .app-title { font-size: 20px; } .app-subtitle { font-size: 12px; }
            #controls { padding: 15px; }
            .control-group.input-group { min-width: unset; }
            .control-group .tagify { min-width: unset; width: 100%; }
            .radio-group { flex-direction: column; align-items: flex-start; gap: 10px; }
            #generate-button, #reset-button-main { width: 100%; justify-content: center; padding: 12px; }
            #graph-container { margin: 0 10px 10px 10px; border-radius: 12px; }
            .floating-controls { 
                top: 10px; 
                right: 20px; 
                gap: 8px; 
            }
            .floating-btn { width: 35px; height: 35px; font-size: 14px; }
            .stats-panel { flex-wrap: wrap; justify-content: flex-start; gap: 10px; }
            .stat-item { padding: 6px 10px; min-width: 50px; }
            .stat-number { font-size: 16px; } .stat-label { font-size: 10px; }
            #message-area { font-size: 14px; padding: 20px; max-width: 90%; }
            .theme-toggle-container { position: absolute; top: 15px; right: 20px; }
        }
    </style>
</head>
<body>

<div id="main-container">
    <div id="header">
        <div class="header-content">
            <div class="logo-section">
                <div class="logo-icon"><i class="fas fa-project-diagram"></i></div>
                <div>
                    <h1 class="app-title">Bağımlılık Keşif Aracı</h1>
                    <p class="app-subtitle">Veri tabloları arası ilişkileri görselleştirin</p>
                </div>
            </div>
            <div class="stats-panel">
                <div class="stat-item">
                    <div class="stat-number" id="total-tables-stat">-</div>
                    <div class="stat-label">Toplam Tablo</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="total-relations-stat">-</div>
                    <div class="stat-label">Toplam İlişki</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="visible-nodes-stat">-</div>
                    <div class="stat-label">Görünür Düğüm</div>
                </div>
                 <div class="stat-item">
                    <div class="stat-number" id="visible-edges-stat">-</div>
                    <div class="stat-label">Görünür Kenar</div>
                </div>
            </div>
        </div>
    </div>
    
    <div id="controls">
        <div class="control-group input-group">
            <label for="node-tag-input"><i class="fas fa-table-list"></i>Tablo Seç:</label>
            <input id="node-tag-input" placeholder="Tablo adlarını yazın veya seçin...">
        </div>
        
        <div class="control-group">
            <label><i class="fas fa-layer-group"></i>Seviye:</label>
            <div class="radio-group">
                <label class="radio-option">
                    <input type="radio" id="level-all" name="display-level" value="all" checked>
                    <span>Tümü</span>
                </label>
                <label class="radio-option">
                    <input type="radio" id="level-direct" name="display-level" value="direct">
                    <span>Doğrudan</span>
                </label>
            </div>
        </div>
         
        <div class="control-group">
            <button id="generate-button" disabled><i class="fas fa-play-circle"></i>Oluştur</button>
            <button id="reset-button-main"><i class="fas fa-undo-alt"></i>Sıfırla</button>
        </div>
        <div class="control-group theme-toggle-container">
             <button id="theme-toggle-button" class="floating-btn" title="Temayı Değiştir" style="position: static; backdrop-filter: none;">
                <i class="fas fa-moon"></i>
            </button>
        </div>
    </div>
    
    <div id="main-content-area" style="position: relative; flex-grow: 1; display: flex; flex-direction: column;"> <!-- DEĞİŞİKLİK: Yeni parent div -->
        <div id="graph-container">
        </div>
        
        <div class="floating-controls">
            <button class="floating-btn" id="fit-button" title="Grafiği Sığdır"><i class="fas fa-compress-arrows-alt"></i></button>
            <button class="floating-btn" id="zoom-in-button" title="Yakınlaştır"><i class="fas fa-search-plus"></i></button>
            <button class="floating-btn" id="zoom-out-button" title="Uzaklaştır"><i class="fas fa-search-minus"></i></button>
            <button class="floating-btn" id="fullscreen-button" title="Tam Ekran"><i class="fas fa-expand"></i></button>
        </div>
        <div id="message-area">Başlamak için tablo(lar) seçin ve 'Grafiği Oluştur'a tıklayın.</div>
        <div id="context-menu"> <!-- DEĞİŞİKLİK: Context menu buraya taşındı -->
            <button id="copy-node-name-button"><i class="fas fa-copy"></i>İsmi Kopyala</button>
            <hr>
            <button id="expand-downstream-button"><i class="fas fa-arrow-down"></i>Aşağı Yönlü Genişlet (1 Sv)</button>
            <button id="expand-upstream-button"><i class="fas fa-arrow-up"></i>Yukarı Yönlü Genişlet (1 Sv)</button>
            <hr>
            <button id="expand-all-downstream-button"><i class="fas fa-angle-double-down"></i>Tüm Aşağı Yönlüleri Göster</button>
            <button id="expand-all-upstream-button"><i class="fas fa-angle-double-up"></i>Tüm Yukarı Yönlüleri Göster</button>
        </div>
    </div>
</div>

<script type="text/javascript">
    const DEBUG_MODE = true; 
    const DEBUG_CY_STYLE = false; 
    const csvPath = 'lib/table_relations.csv';
    const nodeFixedSize = { widthPadding: 30, height: 40 }; 

    const cytoscapeStyles = {
        getResolvedValue: function(varName, defaultValue = null) {
            let value = getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
            if (value === '' || value === null || typeof value === 'undefined') {
                if (DEBUG_CY_STYLE) console.warn(`[STYLE DEBUG] CSS Değişkeni '${varName}' boş/tanımsız. Varsayılan: ${defaultValue}`);
                return defaultValue;
            }
            if ((value.startsWith("'") && value.endsWith("'")) || (value.startsWith('"') && value.endsWith('"'))) {
                value = value.slice(1, -1);
            }
            if (DEBUG_CY_STYLE) console.log(`[STYLE DEBUG] CSS Değişkeni: ${varName}, Okunan Değer (Temizlenmiş): '${value}'`);
            return value;
        },
        getBaseStyle: function() {
            const isDark = document.body.classList.contains('dark-mode');
            const themeSuffix = isDark ? '-dark' : '-light';
            const safeGet = (varName, defaultValue) => this.getResolvedValue(varName + themeSuffix, defaultValue);

            const getSafeGradientColors = (gradientCssVarKey, singleColorFallbackCssVarKey) => {
                const rawGradientValue = this.getResolvedValue(gradientCssVarKey + themeSuffix);
                if (DEBUG_CY_STYLE) console.log(`[STYLE DEBUG] getSafeGradientColors - rawGradientValue for ${gradientCssVarKey + themeSuffix}: '${rawGradientValue}'`);
                if (rawGradientValue && typeof rawGradientValue === 'string' && rawGradientValue.trim() !== '') {
                    const colors = rawGradientValue.split(' ').map(c => c.trim()).filter(c => c !== '' && c.startsWith('#'));
                    if (colors.length >= 2) {
                        if (DEBUG_CY_STYLE) console.log(`[STYLE DEBUG] getSafeGradientColors - Parsed gradient colors for ${gradientCssVarKey}:`, colors);
                        return colors; 
                    } else if (colors.length === 1) {
                         if (DEBUG_CY_STYLE) console.log(`[STYLE DEBUG] getSafeGradientColors - Single color found for ${gradientCssVarKey}, duplicating: [${colors[0]}, ${colors[0]}]`);
                        return [colors[0], colors[0]];
                    }
                }
                const fallbackColor = this.getResolvedValue(singleColorFallbackCssVarKey + themeSuffix, isDark ? '#333333' : '#DDDDDD');
                if (DEBUG_CY_STYLE) console.log(`[STYLE DEBUG] getSafeGradientColors - Fallback for ${gradientCssVarKey}. Using [${fallbackColor}, ${fallbackColor}]`);
                return [fallbackColor, fallbackColor]; 
            };
            
            const getSafeNumber = (varNameKey, defaultValue) => {
                const valStr = this.getResolvedValue(varNameKey + themeSuffix);
                const valNum = parseFloat(valStr);
                if (DEBUG_CY_STYLE && isNaN(valNum) && valStr !== null && valStr !== '') console.warn(`[STYLE DEBUG] getSafeNumber - ${varNameKey + themeSuffix}: '${valStr}' sayıya çevrilemedi. Varsayılan: ${defaultValue}`);
                return isNaN(valNum) ? defaultValue : valNum;
            };

            const getSafeKeyword = (varNameKey, allowedKeywords, defaultValue) => {
                const val = this.getResolvedValue(varNameKey + themeSuffix);
                const isValid = val && allowedKeywords.includes(val);
                if (DEBUG_CY_STYLE && !isValid && val !== null) console.warn(`[STYLE DEBUG] getSafeKeyword - ${varNameKey + themeSuffix}: '${val}' geçersiz. İzin verilen: ${allowedKeywords.join(',')}. Varsayılan: ${defaultValue}`);
                return isValid ? val : defaultValue;
            };

            try {
                const stylesArray = [
                    { selector: 'node', style: { 
                        'background-color': safeGet('--cy-node-bg', '#667eea'),
                        'background-gradient-stop-colors': getSafeGradientColors('--cy-node-gradient', '--cy-node-bg'),
                        'background-gradient-direction': getSafeKeyword('--cy-node-gradient-direction', ['to-bottom-right', 'to-top-left', 'to-right', 'to-left', 'to-bottom', 'to-top'], 'to-bottom-right'),
                        'border-color': safeGet('--cy-node-border', '#5a6fd8'), 
                        'border-width': getSafeNumber('--cy-node-border-width', 2), 
                        'label': 'data(label)', 'text-valign': 'center', 'text-halign': 'center', 
                        'font-size': safeGet('--cy-node-font-size','11px'), 
                        'color': safeGet('--cy-node-text', 'white'), 
                        'font-weight': String(safeGet('--cy-node-font-weight', '600')),
                        'text-wrap': 'none', 
                        'width': 'label', // DEĞİŞİKLİK: Eski haline getirildi
                        'padding-left': nodeFixedSize.widthPadding / 2, // padding'i explicit olarak ayarlamaya devam edelim
                        'padding-right': nodeFixedSize.widthPadding / 2,
                        'height': nodeFixedSize.height, 
                        'shape': 'round-rectangle', 
                        // border-radius için CSS değişkeninden string ('8px') alıp direkt atıyoruz. 
                        // Cytoscape bunu doğru yorumlayamazsa 'corner-radius' veya shape spesifik radius kullanılmalı.
                        // Şimdilik, Cytoscape'in kendi parse mekanizmasına bırakıyoruz (getSafeNumber kullanmadan).
                        'border-radius': safeGet('--cy-node-border-radius', '8px'), // DEĞİŞİKLİK: '8px' string olarak ve safeGet ile
                        'text-shadow-blur': getSafeNumber('--cy-node-text-shadow-blur', 0), // DEĞİŞİKLİK: GERİ GETİRİLDİ ve getSafeNumber
                        'text-shadow-color': safeGet('--cy-node-text-shadow-color', isDark ? 'rgba(0,0,0,0.5)' : 'rgba(0,0,0,0.2)'), // DEĞİŞİKLİK: GERİ GETİRİLDİ ve safeGet
                        'text-shadow-offset-x': getSafeNumber('--cy-node-text-shadow-offset-x', 0),  // DEĞİŞİKLİK: GERİ GETİRİLDİ ve getSafeNumber
                        'text-shadow-offset-y': getSafeNumber('--cy-node-text-shadow-offset-y', 0), // DEĞİŞİKLİK: GERİ GETİRİLDİ ve getSafeNumber
                        'transition-property': 'border-width, border-color, background-color, color, text-shadow-color', 'transition-duration': '0.3s'
                    }},
                    { selector: 'node[label*=".STG_"]', style: { 
                        'background-color': safeGet('--cy-stg-bg', '#e9ecef'),
                        'background-gradient-stop-colors': getSafeGradientColors('--cy-stg-gradient', '--cy-stg-bg'),
                        'border-color': safeGet('--cy-stg-border', '#adb5bd'),
                        'color': safeGet('--cy-stg-text', '#495057')
                    }},
                    { selector: 'node:selected', style: { 
                        'border-color': safeGet('--cy-selected-border', '#dc3545'), 
                        'border-width': getSafeNumber('--cy-selected-border-width', 3), 
                        'background-color': safeGet('--cy-selected-bg', '#fff5f5'),
                        'background-gradient-stop-colors': getSafeGradientColors('--cy-selected-gradient', '--cy-selected-bg'),
                        'color': safeGet('--cy-selected-text', '#dc3545'),
                        'overlay-color': safeGet('--cy-selected-overlay-color', safeGet('--cy-selected-border', '#dc3545')), 
                        'overlay-opacity': getSafeNumber('--cy-selected-overlay-opacity', 0.15), 
                        'overlay-padding': getSafeNumber('--cy-selected-overlay-padding', 10), 
                        'z-index': 10,
                    }},
                    { selector: 'node[isStartNode="true"]', style: { 
                        'border-width': getSafeNumber('--cy-start-border-width', 3), 
                        'border-color': safeGet('--cy-start-border', '#28a745'), 
                        'font-weight': String(safeGet('--cy-start-font-weight', 'bold')),
                        'background-color': safeGet('--cy-start-bg', '#d4edda'),
                        'background-gradient-stop-colors': getSafeGradientColors('--cy-start-gradient', '--cy-start-bg'),
                        'color': safeGet('--cy-start-text', '#155724'),
                        'z-index': 8 
                    }},
                    { selector: 'edge', style: { 
                        'width': getSafeNumber('--cy-edge-width', 1.8), 
                        'line-color': safeGet('--cy-edge-line', '#ced4da'), 
                        'target-arrow-shape': getSafeKeyword('--cy-edge-arrow-shape', ['triangle', 'tee', 'circle', 'square', 'diamond', 'none', 'vee'], 'triangle'), 
                        'target-arrow-color': safeGet('--cy-edge-arrow-color', safeGet('--cy-edge-line', '#ced4da')), 
                        'arrow-scale': getSafeNumber('--cy-edge-arrow-scale', 1.1), 
                        'curve-style': getSafeKeyword('--cy-edge-curve-style', ['bezier', 'straight', 'haystack', 'unbundled-bezier', 'segments', 'taxi'], 'bezier'), 
                        'control-point-step-size': getSafeNumber('--cy-edge-control-point-step', 50),
                        'z-index': 1, 
                        'opacity': getSafeNumber('--cy-edge-opacity', 0.7),
                        'transition-property': 'line-color, target-arrow-color, width, opacity', 'transition-duration': '0.3s'
                    }},
                    { selector: 'edge.highlighted-by-node', style: { 
                        'line-color': safeGet('--cy-edge-highlighted', '#dc3545'), 
                        'target-arrow-color': safeGet('--cy-edge-highlighted-arrow', safeGet('--cy-edge-highlighted', '#dc3545')), 
                        'width': getSafeNumber('--cy-edge-highlighted-width', 3), 
                        'z-index': 5, 'opacity': 1
                    }},
                    { selector: 'edge:selected', style: { 
                        'line-color': safeGet('--cy-edge-selected-line', safeGet('--cy-edge-highlighted', '#dc3545')), 
                        'target-arrow-color': safeGet('--cy-edge-selected-arrow', safeGet('--cy-edge-highlighted', '#dc3545')), 
                        'width': getSafeNumber('--cy-edge-selected-width', 3.5), 
                        'overlay-opacity': 0, 'z-index': 9, 'opacity': 1
                    }}
                ];
                if (DEBUG_CY_STYLE) console.log("[STYLE DEBUG] Son Oluşturulan Stil Objesi:", JSON.parse(JSON.stringify(stylesArray)));
                return stylesArray;
            } catch (e) {
                console.error("getBaseStyle içinde kritik hata:", e);
                return [{selector: 'node', style: {'background-color': 'red', label: 'data(id)'}}, {selector: 'edge', style: {'line-color': 'red'}}];
            }
        }
    };

    const elkLayoutOptionsBase = {
        name: 'elk', fit: true, padding: 70,
        animate: true, animationDuration: 500, animationEasing: 'ease-out-quad',
        elk: {
            'elk.padding': '[top=70,left=70,bottom=70,right=70]', 'elk.spacing.nodeNode': 90,
            'elk.nodeLabels.placement': 'INSIDE', 
            'elk.nodeSize.constraints': 'NODE_LABELS MINIMUM_SIZE PORT_LABELS EXTERNAL_PORTS FIXED_POS', 
            'elk.nodeSize.options': `[minimumPadding=${nodeFixedSize.widthPadding/2}]`, // widthPadding/2 elk için de geçerli
            algorithm: 'layered', 'elk.direction': 'RIGHT',
            'layered.spacing.nodeNodeBetweenLayers': 160, 'layered.spacing.edgeNodeBetweenLayers': 110,
            'layered.spacing.nodeNode': 45, 'elk.layered.cycleBreaking.strategy': 'GREEDY',
            'elk.edgeRouting': 'POLYLINE', 'elk.layered.mergeEdges': true, 'elk.separateConnectedComponents': false,
            'elk.layered.crossingMinimization.strategy': 'LAYER_SWEEP'
        }
    };
    
    let cy = null, allNodesMasterData = new Map(), allEdgesMasterData = [], outgoingEdgesMap = new Map(), incomingEdgesMap = new Map();
    let selectedStartNodes = new Set(), tagifyInstance = null, contextNodeId = null, currentTheme = 'light';

    const mainContentArea = document.getElementById('main-content-area'); // DEĞİŞİKLİK
    const graphContainer = document.getElementById('graph-container');
    const messageArea = document.getElementById('message-area');
    const nodeTagInput = document.getElementById('node-tag-input');
    const generateButton = document.getElementById('generate-button');
    const mainResetButton = document.getElementById('reset-button-main');
    const themeToggleButton = document.getElementById('theme-toggle-button');
    const contextMenu = document.getElementById('context-menu');
    const copyNameButton = document.getElementById('copy-node-name-button');
    const displayLevelAllRadio = document.getElementById('level-all');
    const displayLevelDirectRadio = document.getElementById('level-direct');
    const expandDownstreamButton = document.getElementById('expand-downstream-button');
    const expandUpstreamButton = document.getElementById('expand-upstream-button');
    const expandAllDownstreamButton = document.getElementById('expand-all-downstream-button');
    const expandAllUpstreamButton = document.getElementById('expand-all-upstream-button');
    const totalTablesStat = document.getElementById('total-tables-stat');
    const totalRelationsStat = document.getElementById('total-relations-stat');
    const visibleNodesStat = document.getElementById('visible-nodes-stat');
    const visibleEdgesStat = document.getElementById('visible-edges-stat');
    const fitButton = document.getElementById('fit-button');
    const zoomInButton = document.getElementById('zoom-in-button');
    const zoomOutButton = document.getElementById('zoom-out-button');
    const fullscreenButton = document.getElementById('fullscreen-button');

    function applyTheme(theme) {
        document.body.classList.toggle('dark-mode', theme === 'dark');
        themeToggleButton.innerHTML = theme === 'dark' ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
        currentTheme = theme;
        localStorage.setItem('theme', theme);
        if (cy) {
            try {
                 cy.style(cytoscapeStyles.getBaseStyle()).update();
            } catch (e) {
                console.error("Tema uygulanırken Cytoscape stil hatası:", e);
            }
        }
    }
    function toggleTheme() { applyTheme(currentTheme === 'light' ? 'dark' : 'light'); }

    document.addEventListener('DOMContentLoaded', () => {
        document.body.addEventListener('contextmenu', event => event.preventDefault());
        try {
            if (typeof cytoscape === 'undefined') throw new Error("Cytoscape kütüphanesi yüklenemedi.");
            if (typeof ELK === 'undefined') throw new Error("ElkJS kütüphanesi (ELK) yüklenemedi.");
             if (typeof cytoscapeElk !== 'undefined') { 
                cytoscape.use(cytoscapeElk);
                if (DEBUG_MODE) console.log("Cytoscape ElkJS eklentisi başarıyla kaydedildi.");
            } else {
                console.error("cytoscapeElk eklentisi yüklenemedi!");
            }
        } catch (e) {
            console.error("Başlatma hatası (kütüphane/eklenti eksik):", e);
            setMessage(`Uygulama başlatılamadı: ${e.message}.`, "error");
            generateButton.disabled = true;
            return;
        }

        const savedTheme = localStorage.getItem('theme') || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        applyTheme(savedTheme);
        setMessage("Veri yükleniyor...", "loading");
        generateButton.disabled = true;

        try {
            tagifyInstance = new Tagify(nodeTagInput, {
                dropdown: { maxItems: 15, enabled: 0, closeOnSelect: true, highlightFirst: true, classname: 'tagify__dropdown--modern' },
                enforceWhitelist: true, delimiters: ",|\t",
            });
            tagifyInstance.on('add', onTagAdd).on('remove', onTagRemove);
        } catch(e) {
            console.error("Tagify başlatma hatası:", e);
            setMessage("Arayüz bileşeni (Tagify) başlatılamadı.", "error");
        }
        
        loadAndProcessData();

        generateButton.addEventListener('click', handleGenerateButtonClick);
        mainResetButton.addEventListener('click', handleReset);
        themeToggleButton.addEventListener('click', toggleTheme);
        fitButton.addEventListener('click', () => cy?.fit(cy.elements(':visible'), 60));
        zoomInButton.addEventListener('click', () => cy?.zoom({ level: cy.zoom() * 1.5, renderedPosition: { x: cy.width() / 2, y: cy.height() / 2 }}));
        zoomOutButton.addEventListener('click', () => cy?.zoom({ level: cy.zoom() * 0.5, renderedPosition: { x: cy.width() / 2, y: cy.height() / 2 }}));
        fullscreenButton.addEventListener('click', toggleFullScreen);
        copyNameButton.addEventListener('click', handleCopyName);
        expandDownstreamButton.addEventListener('click', () => handleExpandNodeContext('downstream', false));
        expandUpstreamButton.addEventListener('click', () => handleExpandNodeContext('upstream', false));
        expandAllDownstreamButton.addEventListener('click', () => handleExpandNodeContext('downstream', true));
        expandAllUpstreamButton.addEventListener('click', () => handleExpandNodeContext('upstream', true));
        document.addEventListener('click', (event) => { 
            // DEĞİŞİKLİK: Tam ekran parent div dışına tıklanınca da context menu kapansın
            if (contextMenu.style.display === 'block' && !contextMenu.contains(event.target) && !graphContainer.contains(event.target)) {
                 hideContextMenu();
            }
        }, true);
    });

    function toggleFullScreen() {
        const elemToFullscreen = mainContentArea; // DEĞİŞİKLİK: Artık yeni parent div tam ekran oluyor
        if (!document.fullscreenElement) {
            elemToFullscreen.requestFullscreen?.().catch(err => console.error(`Tam ekran hatası: ${err.message} (${err.name})`));
            fullscreenButton.innerHTML = '<i class="fas fa-compress"></i>';
            contextMenu.style.zIndex = '2147483647'; // En yüksek z-index'e çıkar
        } else {
            document.exitFullscreen?.();
            fullscreenButton.innerHTML = '<i class="fas fa-expand"></i>';
            contextMenu.style.zIndex = '10000'; // Normal z-index'e geri dön
        }
    }
    document.addEventListener('fullscreenchange', () => {
        if (!document.fullscreenElement) {
            fullscreenButton.innerHTML = '<i class="fas fa-expand"></i>';
            contextMenu.style.zIndex = '10000'; // Normal z-index'e geri dön
        } else {
            contextMenu.style.zIndex = '2147483647'; // Tam ekrandayken de yüksek z-index
        }
    });

    function onTagAdd(e) { selectedStartNodes.add(e.detail.data.value); generateButton.disabled = selectedStartNodes.size === 0; }
    function onTagRemove(e) { selectedStartNodes.delete(e.detail.data.value); generateButton.disabled = selectedStartNodes.size === 0; }
    function updateStats(nodes = 0, edges = 0) {
        totalTablesStat.textContent = allNodesMasterData.size; 
        totalRelationsStat.textContent = allEdgesMasterData.length;
        visibleNodesStat.textContent = nodes;
        visibleEdgesStat.textContent = edges;
    }

    function setMessage(text, type = "info") {
        messageArea.textContent = text;
        messageArea.className = ''; messageArea.classList.add(type);
        messageArea.classList.toggle("initial", type === "info" && text.startsWith("Başlamak için"));
        
        const existingIcon = messageArea.querySelector('i.fa-custom-icon');
        if (existingIcon) existingIcon.remove();
        let iconClass = type === "info" ? "fa-info-circle" : type === "error" ? "fa-exclamation-triangle" : "";
        if(iconClass){
            const iconEl = document.createElement('i');
            iconEl.className = `fas ${iconClass} fa-custom-icon`;
            iconEl.style.marginRight = "10px";
            messageArea.insertBefore(iconEl, messageArea.firstChild);
        }
        showMessage();
    }
    function hideMessage() { messageArea.classList.add("hidden"); }
    function showMessage() { messageArea.classList.remove("hidden"); }

    function handleReset() {
        tagifyInstance?.removeAllTags();
        selectedStartNodes.clear();
        generateButton.disabled = true;
        cy?.destroy(); 
        cy = null;
        setMessage("Başlamak için tablo(lar) seçin ve 'Grafiği Oluştur'a tıklayın.", "info");
        updateStats(0, 0); 
        hideContextMenu();
    }

    function loadAndProcessData() {
         fetch(csvPath)
            .then(r => { if(!r.ok) throw new Error(`HTTP ${r.status}: ${csvPath} alınamadı.`); return r.text(); })
            .then(txt => {
                Papa.parse(txt, {
                    header: true, skipEmptyLines: true,
                    complete: (res) => {
                        if(res.errors.length > 0) {
                            console.warn("CSV Hataları:", res.errors);
                            res.errors.forEach(err => console.warn(` - Satır ${err.row}: ${err.message} (${err.code})`));
                        }
                        if(!res.data || res.data.length === 0) throw new Error("CSV boş veya geçersiz veri içeriyor.");
                        preprocessData(res.data); 
                        setMessage("Başlamak için tablo(lar) seçin ve 'Grafiği Oluştur'a tıklayın.", "info");
                        updateStats(0,0); 
                    },
                    error: (err) => { throw new Error("CSV Ayrıştırma Hatası: "+err.message); }
                });
            })
            .catch(handleError);
    };
    
   function preprocessData(data) {
        if (DEBUG_MODE) console.log("preprocessData başlıyor...");
        allNodesMasterData.clear();
        allEdgesMasterData = [];
        outgoingEdgesMap.clear();
        incomingEdgesMap.clear();
        const edgesSet = new Set();
        const uniqueTableNamesForWhitelist = new Set(); 

        data.forEach((row, index) => {
            const sourceName = row.source_table_name ? row.source_table_name.trim() : null;
            const targetName = row.target_table_name ? row.target_table_name.trim() : null;

            if (!sourceName || !targetName) {
                if (DEBUG_MODE) console.warn(`Satır ${index + 2}: Eksik kaynak veya hedef tablo adı. Kaynak: '${row.source_table_name}', Hedef: '${row.target_table_name}'`);
                return; 
            }

            if (sourceName === targetName) {
                if (DEBUG_MODE) console.warn(`Satır ${index + 2}: Kendi kendine referans veren kenar atlandı: ${sourceName}`);
                return; 
            }
            
            uniqueTableNamesForWhitelist.add(sourceName);
            uniqueTableNamesForWhitelist.add(targetName);

            const edgeKey = `${sourceName}->${targetName}`; 
            if (!edgesSet.has(edgeKey)) {
                edgesSet.add(edgeKey);
                const edgeObject = { from: sourceName, to: targetName, id: edgeKey };
                allEdgesMasterData.push(edgeObject);
                
                [sourceName, targetName].forEach(nodeId => {
                    if (!allNodesMasterData.has(nodeId)) {
                        allNodesMasterData.set(nodeId, { id: nodeId, label: nodeId });
                    }
                });

                if (!outgoingEdgesMap.has(sourceName)) {
                    outgoingEdgesMap.set(sourceName, new Set());
                }
                outgoingEdgesMap.get(sourceName).add(edgeObject);

                if (!incomingEdgesMap.has(targetName)) {
                    incomingEdgesMap.set(targetName, new Set());
                }
                incomingEdgesMap.get(targetName).add(edgeObject);
            }
        });
        
        if (DEBUG_MODE) console.log(`preprocessData tamamlandı: ${allNodesMasterData.size} benzersiz tablo, ${allEdgesMasterData.length} benzersiz ilişki.`);
        
        if (tagifyInstance) {
            tagifyInstance.settings.whitelist = Array.from(uniqueTableNamesForWhitelist).sort();
            if (DEBUG_MODE) console.log("Tagify whitelist (settings.whitelist) güncellendi.");
        }
    };
    
    function getNeighboringElements(startNodeId, direction, getAllLevels) {
        if (DEBUG_MODE) console.log(`getNeighboringElements çağrıldı: startNodeId='${startNodeId}', direction='${direction}', getAllLevels=${getAllLevels}`);
        const newNodes = new Set();
        const newEdges = new Set();
        const mapToUse = direction === 'downstream' ? outgoingEdgesMap : incomingEdgesMap;
        const neighborKey = direction === 'downstream' ? 'to' : 'from';

        if (!mapToUse.has(startNodeId) && DEBUG_MODE) {
            console.log(`getNeighboringElements: '${startNodeId}' için ${direction} haritasında giriş bulunamadı (Bu, ${direction} yönünde ilişkisi olmayan bir düğüm için normaldir).`);
        }

        const queue = [startNodeId];
        const visitedInSearch = new Set(); 
        if(!getAllLevels) visitedInSearch.add(startNodeId); 

        let head = 0;
        while (head < queue.length) {
            const currentId = queue[head++];

            if (!getAllLevels && currentId !== startNodeId && visitedInSearch.has(currentId)) {
                continue;
            }
            
            const edgesFromCurrent = mapToUse.get(currentId);
            if (edgesFromCurrent) {
                edgesFromCurrent.forEach(edgeObj => {
                    newEdges.add(edgeObj); 
                    const neighborNodeId = edgeObj[neighborKey];
                    
                    if (neighborNodeId !== startNodeId) { 
                        newNodes.add(neighborNodeId);
                    }

                    if (getAllLevels && !visitedInSearch.has(neighborNodeId)) {
                         visitedInSearch.add(neighborNodeId); 
                         if (!queue.slice(head).includes(neighborNodeId)) { 
                            queue.push(neighborNodeId);
                         }
                    }
                });
            }
            if (!getAllLevels && currentId === startNodeId) break; 
        }
        if (DEBUG_MODE) {
            console.log(`  -> Bulunan Yeni Düğümler (${newNodes.size}): ${Array.from(newNodes).join(', ')}`);
            console.log(`  -> Bulunan Yeni Kenarlar (${newEdges.size}): ${Array.from(newEdges).map(e => e.id).join(', ')}`);
        }
        return { nodes: Array.from(newNodes), edges: Array.from(newEdges) };
    };

    function handleGenerateButtonClick() {
        const validStartNodeIds = Array.from(selectedStartNodes); 
        if (validStartNodeIds.length === 0) { setMessage("Lütfen en az bir tablo seçin.", "error"); return; }

        const originalButtonHTML = generateButton.innerHTML;
        generateButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Oluşturuluyor...';
        generateButton.disabled = true; mainResetButton.disabled = true;
        setMessage("Grafik oluşturuluyor...", "loading");

        setTimeout(() => {
            try {
                const combinedNodesSet = new Set(), combinedEdgesMap = new Map();
                const isDirectOnly = displayLevelDirectRadio.checked;
                validStartNodeIds.forEach(startId => { 
                    if (!allNodesMasterData.has(startId)) { 
                        if (DEBUG_MODE) console.warn(`Başlangıç düğümü '${startId}' ana veri setinde bulunamadı.`);
                        return; 
                    }
                    combinedNodesSet.add(startId);
                    const downDeps = getNeighboringElements(startId, 'downstream', !isDirectOnly);
                    const upDeps = getNeighboringElements(startId, 'upstream', !isDirectOnly);
                    downDeps.nodes.forEach(n => combinedNodesSet.add(n)); 
                    downDeps.edges.forEach(eObj => combinedEdgesMap.set(eObj.id, eObj)); 
                    upDeps.nodes.forEach(n => combinedNodesSet.add(n));
                    upDeps.edges.forEach(eObj => combinedEdgesMap.set(eObj.id, eObj));
                });
                
                let messageText = "", messageType = "info";

                if (combinedNodesSet.size === 0 && validStartNodeIds.length > 0) {
                     messageText = `Seçilen tablo(lar) (${validStartNodeIds.join(', ')}) için hiç düğüm bulunamadı.`; messageType = "error";
                } else if (combinedNodesSet.size <= validStartNodeIds.length && combinedEdgesMap.size === 0 && validStartNodeIds.length > 0) { 
                    messageText = `Seçilenler (${validStartNodeIds.join(', ')}) için ${isDirectOnly ? 'doğrudan' : 'hiç'} bağımlılık bulunamadı.`;
                } else if (combinedNodesSet.size === 0) { 
                    messageText = "Grafik oluşturmak için veri bulunamadı."; messageType = "error";
                }
                
                if (messageText) {
                    if (cy) { try {cy.destroy();} catch(e){} cy = null; } 
                    updateStats(0,0);
                    setMessage(messageText, messageType);
                } else {
                    const cyElements = [];
                    combinedNodesSet.forEach(nodeId => { 
                        const masterNodeData = allNodesMasterData.get(nodeId);
                        if (masterNodeData) cyElements.push({ group: 'nodes', data: { id: masterNodeData.id, label: masterNodeData.label, isStartNode: validStartNodeIds.includes(masterNodeData.id) } });
                         else if(DEBUG_MODE) console.warn(`generateButton: ${nodeId} için masterNodeData bulunamadı!`);
                    });
                    combinedEdgesMap.forEach(edgeObj => { 
                        if (combinedNodesSet.has(edgeObj.from) && combinedNodesSet.has(edgeObj.to)) {
                            cyElements.push({ group: 'edges', data: { id: edgeObj.id, source: edgeObj.from, target: edgeObj.to } });
                        } else {
                            if (DEBUG_MODE) console.warn(`generateButton: Kenar (${edgeObj.id}) atlandı, kaynak veya hedef düğüm grafikte (combinedNodesSet) değil: ${edgeObj.from} -> ${edgeObj.to}`);
                        }
                    });
                    
                    if (cyElements.filter(el => el.group === 'nodes').length > 0) {
                         renderChainGraph(cyElements, validStartNodeIds);
                    } else { 
                        setMessage("Grafik için geçerli düğüm bulunamadı.", "error");
                        if (cy) { try {cy.destroy();} catch(e){} cy = null; } updateStats(0,0);
                    }
                }
            } catch (error) { handleError(error); }
            finally {
                generateButton.innerHTML = originalButtonHTML;
                generateButton.disabled = selectedStartNodes.size === 0;
                mainResetButton.disabled = false;
            }
        }, 50);
    };

    function renderChainGraph(elements, startNodeIds) {
        if (cy) { try {cy.destroy();} catch(e){} cy = null; }
        try {
            if (DEBUG_CY_STYLE) console.log("[STYLE DEBUG] Cytoscape'e gönderilen elementler:", JSON.parse(JSON.stringify(elements)));
            const finalStyle = cytoscapeStyles.getBaseStyle();
            if (DEBUG_CY_STYLE) console.log("[STYLE DEBUG] Cytoscape'e gönderilen stil:", JSON.parse(JSON.stringify(finalStyle)));

            cy = cytoscape({
                container: graphContainer, 
                elements: elements, 
                style: finalStyle,
                layout: elkLayoutOptionsBase, zoom: 1, pan: { x: 0, y: 0 },
                minZoom: 0.1, maxZoom: 3, 
                wheelSensitivity: 0.2, 
                selectionType: 'single',
            });
        } catch (e) {
            console.error("Cytoscape başlatma hatası:", e);
            setMessage(`Grafik motoru başlatılamadı: ${e.message}. Konsolu kontrol edin.`, "error");
            if (cy) { try { cy.destroy(); cy = null; } catch(err) {} }
            updateStats(0,0);
            return;
        }

        cy.ready(() => {
            cy.one('layoutstop', () => {
                const visibleStartNodes = startNodeIds ? cy.nodes(startNodeIds.map(id => `[id = "${CSS.escape(id)}"]`).join(',')).filter(':visible') : cy.collection();
                if (visibleStartNodes.length > 0) { 
                    cy.fit(cy.elements(':visible'), 60); 
                    cy.center(visibleStartNodes);
                } else { 
                    cy.fit(cy.elements(':visible'), 60); 
                }
                startNodeIds?.forEach(nodeId => { 
                    try {
                         cy.getElementById(CSS.escape(nodeId))?.select();
                    } catch(e) { console.warn(`Başlangıç düğümü seçilemedi ID: ${nodeId}`, e); }
                });
                hideMessage();
                updateStats(cy.nodes(':visible').length, cy.edges(':visible').length);
            });
            cy.on('cxttap', 'node', handleRightClickCy);
            cy.on('tap', event => { 
                if( event.target === cy ){ // Grafiğin boş alanına tıklandıysa
                     hideContextMenu();
                }
            });
            cy.on('select unselect', 'node', event => {
                cy.edges('.highlighted-by-node').removeClass('highlighted-by-node');
                if (event.type === 'select' && event.target.isNode()) {
                     event.target.connectedEdges().addClass('highlighted-by-node');
                }
            });
            cy.on('zoom pan add remove style data', () => { 
                if (cy && cy.elements().length > 0) { 
                   updateStats(cy.nodes(':visible').length, cy.edges(':visible').length);
                }
            });
        });
    }

    function handleExpandNodeContext(direction, expandAll = false) {
        if (!contextNodeId || !cy) return; 
        if (DEBUG_MODE) console.log(`handleExpandNodeContext çağrıldı: contextNodeId='${contextNodeId}', direction='${direction}', expandAll=${expandAll}`);
        handleActualExpand(contextNodeId, direction, expandAll);
    };

    function handleActualExpand(nodeIdToExpand, direction, expandAll) { 
        hideContextMenu();
        if (DEBUG_MODE) console.log(`handleActualExpand: Başlangıç node='${nodeIdToExpand}', Yön='${direction}', HepsiniGenişlet=${expandAll}`);

        const { nodes: newNodesFound, edges: newEdgesFoundObjects } = getNeighboringElements(nodeIdToExpand, direction, expandAll);
        
        if (DEBUG_MODE) {
            console.log(`  handleActualExpand: getNeighboringElements'tan dönen newNodesFound: [${newNodesFound.join(', ')}]`);
            console.log(`  handleActualExpand: getNeighboringElements'tan dönen newEdgesFoundObjects:`, newEdgesFoundObjects.map(e => e.id));
        }

        const elementsToAdd = [];
        let addedNodeCount = 0;
        let addedEdgeCount = 0;
        
        newNodesFound.forEach(nodeId => { 
            if (nodeId === nodeIdToExpand) { 
                if(DEBUG_MODE) console.log(`  handleActualExpand: '${nodeId}' (genişletilen node) yeni node olarak atlandı.`);
                return;
            }
             try {
                if (cy.getElementById(CSS.escape(nodeId)).empty()) { 
                    const masterNodeData = allNodesMasterData.get(nodeId);
                    if (masterNodeData) {
                        elementsToAdd.push({ group: 'nodes', data: { id: masterNodeData.id, label: masterNodeData.label, isStartNode: false } });
                        addedNodeCount++;
                        if(DEBUG_MODE) console.log(`    Node eklenecek (elementsToAdd): ${masterNodeData.id}`);
                    } else {
                        if(DEBUG_MODE) console.warn(`    MasterData'da bulunamadı, node eklenemiyor: ${nodeId}`);
                    }
                } else {
                     if(DEBUG_MODE) console.log(`    Node zaten grafikte: ${nodeId}`);
                }
            } catch(e) { console.warn(`Düğüm genişletilirken ID hatası (${nodeId}):`, e); }
        });

        newEdgesFoundObjects.forEach(edgeObj => { 
            try {
                if (cy.getElementById(CSS.escape(edgeObj.id)).empty()) { 
                    const sourceNodeId = edgeObj.from;
                    const targetNodeId = edgeObj.to;

                    const sourceIsPresentInGraph = !cy.getElementById(CSS.escape(sourceNodeId)).empty();
                    const targetIsPresentInGraph = !cy.getElementById(CSS.escape(targetNodeId)).empty();
                    
                    const sourceIsConsidered = (sourceNodeId === nodeIdToExpand) || sourceIsPresentInGraph || elementsToAdd.some(el => el.group === 'nodes' && el.data.id === sourceNodeId);
                    const targetIsConsidered = (targetNodeId === nodeIdToExpand) || targetIsPresentInGraph || elementsToAdd.some(el => el.group === 'nodes' && el.data.id === targetNodeId);

                    if (DEBUG_MODE) {
                        console.log(`  Kenar ${edgeObj.id} işleniyor:`);
                        console.log(`    Kaynak ('${sourceNodeId}'): nodeIdToExpand ile aynı mı? ${sourceNodeId === nodeIdToExpand}, Grafikte mi? ${sourceIsPresentInGraph}, Yeni eklenecek mi? ${elementsToAdd.some(el => el.group === 'nodes' && el.data.id === sourceNodeId)} -> Kabul Edildi: ${sourceIsConsidered}`);
                        console.log(`    Hedef ('${targetNodeId}'): nodeIdToExpand ile aynı mı? ${targetNodeId === nodeIdToExpand}, Grafikte mi? ${targetIsPresentInGraph}, Yeni eklenecek mi? ${elementsToAdd.some(el => el.group === 'nodes' && el.data.id === targetNodeId)} -> Kabul Edildi: ${targetIsConsidered}`);
                    }

                    if (sourceIsConsidered && targetIsConsidered) {
                        elementsToAdd.push({ group: 'edges', data: { id: edgeObj.id, source: sourceNodeId, target: targetNodeId } });
                        addedEdgeCount++;
                         if(DEBUG_MODE) console.log(`      ==> Kenar eklenecek (elementsToAdd): ${edgeObj.id}`);
                    } else {
                        if (DEBUG_MODE) console.warn(`      ==> Kenar ${edgeObj.id} ATLANDI. Koşullar sağlanmadı.`);
                    }
                } else {
                    if(DEBUG_MODE) console.log(`    Kenar zaten grafikte: ${edgeObj.id}`);
                }
            } catch(e) { console.warn(`Kenar genişletilirken ID hatası (${edgeObj.id}):`, e); }
        });

        if (elementsToAdd.length > 0) {
            setMessage("Grafik güncelleniyor...", "loading");
            if(DEBUG_MODE) console.log(`handleActualExpand: cy.add() çağrılacak. Eklenecek ${addedNodeCount} node, ${addedEdgeCount} edge. Toplam: ${elementsToAdd.length}`);
            cy.add(elementsToAdd);
            updateNetworkLayout(true);
        } else {
            const message = `"${nodeIdToExpand}" için daha fazla ${direction === 'downstream' ? 'aşağı yönlü' : 'yukarı yönlü'} ${!expandAll ? 'doğrudan' : ''} bağımlılık bulunamadı.`;
            if(DEBUG_MODE) console.log(message);
            setMessage(message, "info");
            setTimeout(hideMessage, 3000);
        }
    };

    function updateNetworkLayout(hideMsgAfter = true) {
        if (!cy || cy.elements().empty()) { if (hideMsgAfter) hideMessage(); return; }
        if (!messageArea.classList.contains('loading')) setMessage("Düzen güncelleniyor...", "loading");
        if (DEBUG_MODE) console.log("updateNetworkLayout çağrıldı.");
        
        const layout = cy.layout(elkLayoutOptionsBase);
        layout.pon('layoutstop').then(function(){ 
            if (DEBUG_MODE) console.log("Layout güncellemesi tamamlandı.");
            const targetNode = contextNodeId ? cy.getElementById(CSS.escape(contextNodeId)) : (selectedStartNodes.size > 0 ? cy.getElementById(CSS.escape(Array.from(selectedStartNodes)[0])) : null);
            
            const targetNodeToCenter = targetNode?.filter(':visible');
            
            if (targetNodeToCenter && targetNodeToCenter.length > 0) {
                 cy.animate({ fit: { eles: cy.elements(':visible'), padding: 60 }, center: { eles: targetNodeToCenter }, duration: 400 });
            } else { 
                cy.fit(cy.elements(':visible'), 60); 
            }
            if (hideMsgAfter) hideMessage();
            updateStats(cy.nodes(':visible').length, cy.edges(':visible').length);
        }).catch(function(err){
            console.error("Layout hatası:", err); 
            setMessage("Grafik düzeni güncellenirken hata oluştu.", "error");
            if (hideMsgAfter) setTimeout(hideMessage, 3000);
        });
        layout.run(); 
    };

    function handleRightClickCy(event) {
        hideContextMenu(); const targetNode = event.target;
        if (!targetNode || typeof targetNode.id !== 'function' || !targetNode.isNode()) return;
        
        // Cytoscape event'inden kaynaklanan sağ tıklama için varsayılan tarayıcı menüsünü engelle
        if (event.originalEvent) { 
            event.originalEvent.preventDefault();
            event.originalEvent.stopPropagation(); 
        } else { // Fallback, daha az olası
            event.preventDefault?.();
            event.stopPropagation?.();
        }
        
        contextNodeId = targetNode.id(); 
        if (DEBUG_MODE) console.log(`handleRightClickCy: Context menu için node seçildi: ${contextNodeId}`);
        
        // clientX/Y yerine renderedPosition kullanmak, Cytoscape zoom/pan durumlarında daha doğru konum verir.
        const renderedPosition = event.renderedPosition || event.position || {x:0, y:0}; 
        let clientX = renderedPosition.x;
        let clientY = renderedPosition.y;

        // Eğer tam ekran ise, menü koordinatlarını tam ekran elementine göre ayarla
        const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
        if (fullscreenElement && fullscreenElement === mainContentArea) {
            const graphRect = graphContainer.getBoundingClientRect(); // VEYA mainContentArea.getBoundingClientRect()
            clientX += graphRect.left;
            clientY += graphRect.top;
        } else if (fullscreenElement) {
            // Başka bir element tam ekranda ise context menüyü doğru konumlandırmak zorlaşır.
            // Bu durumu ayrıca ele almak gerekebilir ya da bu durumda context menü göstermemek tercih edilebilir.
            // Şimdilik basitçe global clientX/Y'ye geri dönelim (eğer originalEvent varsa)
            if (event.originalEvent && typeof event.originalEvent.clientX !== 'undefined') {
                clientX = event.originalEvent.clientX;
                clientY = event.originalEvent.clientY;
            }
        }


        const { offsetWidth: menuWidth, offsetHeight: menuHeight } = contextMenu;
        const { innerWidth: vpWidth, innerHeight: vpHeight } = window;

        let left = clientX;
        let top = clientY;

        if (clientX + menuWidth > vpWidth - 10) { 
            left = vpWidth - menuWidth - 10;
        }
        if (clientY + menuHeight > vpHeight - 10) {
            top = vpHeight - menuHeight - 10;
        }
        left = Math.max(10, left); 
        top = Math.max(10, top);  

        contextMenu.style.top = `${top}px`; 
        contextMenu.style.left = `${left}px`; 
        contextMenu.style.display = 'block';
    }
    function hideContextMenu() { if (contextMenu.style.display === 'block') { contextMenu.style.display = 'none'; contextNodeId = null; } }
    
    function handleCopyName() {
        if (contextNodeId && cy) {
            const nodeName = contextNodeId; 
            const showCopiedMessage = () => { const originalHTML = copyNameButton.innerHTML; copyNameButton.innerHTML = '<i class="fas fa-check-circle"></i> Kopyalandı!'; setTimeout(() => { copyNameButton.innerHTML = originalHTML; }, 1500); };
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(nodeName).then(showCopiedMessage).catch(() => copyTextFallback(nodeName) ? showCopiedMessage() : alert("Kopyalanamadı."));
            } else { copyTextFallback(nodeName) ? showCopiedMessage() : alert("Kopyalanamadı."); }
        }
        hideContextMenu();
    }
    function copyTextFallback(text) {
        const e = document.createElement("textarea"); e.style.position="fixed"; e.style.opacity="0"; e.value=text;
        document.body.appendChild(e); e.select(); let success = false;
        try { success = document.execCommand("copy"); } catch(err) {}
        document.body.removeChild(e); return success;
    }

    function handleError(e) {
        console.error("Genel Hata:", e);
        setMessage(`Hata: ${e.message || "Bilinmeyen bir hata oluştu."} Konsolu kontrol edin.`, "error");
        if(cy) { try { cy.destroy(); cy = null; } catch(err) {} }
        updateStats(0,0);
        generateButton.innerHTML = '<i class="fas fa-play-circle"></i> Oluştur';
        generateButton.disabled = selectedStartNodes.size === 0; 
        mainResetButton.disabled = false;
    };
</script>

</body>
</html>
