<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Etkileşimli Bağımlılık Zinciri Keşfi (Cytoscape.js + Elkjs) - Kapsamlı Engelleme</title>
    <script type="text/javascript" src="https://unpkg.com/papaparse@5.5.2/papaparse.js" defer></script>
    <script src="https://unpkg.com/@yaireo/tagify@4.35.1/dist/tagify.js" defer></script>
    <script src="https://unpkg.com/@yaireo/tagify/dist/tagify.polyfills.min.js" defer></script>
    <link href="https://unpkg.com/@yaireo/tagify/dist/tagify.css" rel="stylesheet" type="text/css" />
    <script src="https://unpkg.com/cytoscape@3.32.0/dist/cytoscape.min.js" defer></script>
    <script src="https://unpkg.com/elkjs@0.10.0/lib/elk.bundled.js" defer></script>
    <script src="https://unpkg.com/cytoscape-elk@2.3.0/dist/cytoscape-elk.js" defer></script>

    <style type="text/css">
        html, body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden; background-color: #f4f6f9; }
        #main-container { display: flex; flex-direction: column; height: 100%; }
        #controls { padding: 10px 15px; background-color: #ffffff; border-bottom: 1px solid #dee2e6; display: flex; flex-wrap: wrap; align-items: center; gap: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .control-group { display: flex; align-items: center; gap: 8px; }
        .control-group label, .control-group span { font-weight: 600; color: #495057; margin-bottom: 0; white-space: nowrap; }
        .control-group input[type="radio"] { margin-right: 2px; margin-left: 8px; cursor: pointer; }
        .control-group .tagify { min-width: 350px; border: 1px solid #ced4da; border-radius: 4px; }
        .tagify__dropdown{ z-index: 9999; }
        #generate-button { padding: 7px 15px; font-size: 1em; cursor: pointer; background-color: #007bff; color: white; border: none; border-radius: 4px; transition: background-color 0.2s ease; }
        #generate-button:hover { background-color: #0056b3; }
        #generate-button:disabled { background-color: #cccccc; cursor: not-allowed; }
        #graph-container { flex-grow: 1; background-color: #ffffff; position: relative; min-height: 300px; border-top: 1px solid #dee2e6; }
        #message-area { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 1.2em; color: #555; text-align: center; background-color: rgba(255, 255, 255, 0.9); padding: 20px; border-radius: 8px; z-index: 10; box-shadow: 0 4px 8px rgba(0,0,0,0.1); display: block; }
        #message-area.loading { color: #0056b3; font-weight: bold; }
        #message-area.error { color: #dc3545; }
        #message-area.hidden { display: none; }
        #context-menu { position: absolute; background-color: #f9f9f9; border: 1px solid #ccc; box-shadow: 2px 2px 5px rgba(0,0,0,0.2); padding: 5px 0; min-width: 280px; z-index: 10000; display: none; border-radius: 4px; }
        #context-menu button { display: block; width: 100%; padding: 8px 15px; border: none; background: none; text-align: left; cursor: pointer; font-size: 0.95em; }
        #context-menu button:hover { background-color: #eee; }
        #context-menu hr { border: 0; border-top: 1px solid #ddd; margin: 5px 0;}
    </style>
</head>
<body>

<div id="main-container">
    <div id="controls">
        <div class="control-group" style="flex-grow: 1;">
            <label for="node-tag-input">Tablo Ekle:</label>
            <input id="node-tag-input" placeholder="Tablo adlarını yazın veya seçin...">
        </div>
        <div class="control-group">
            <label>Gösterim Seviyesi:</label>
            <input type="radio" id="level-all" name="display-level" value="all" checked>
            <label for="level-all">Tüm Bağımlılıklar</label>
            <input type="radio" id="level-direct" name="display-level" value="direct">
            <label for="level-direct">Doğrudan İlişkiler (1.Seviye)</label>
        </div>
         <div class="control-group">
             <button id="generate-button" disabled>Grafiği Oluştur</button>
         </div>
    </div>
    <div id="graph-container">
        <div id="message-area">Başlamak için tablo(lar) ekleyin ve 'Grafiği Oluştur'a tıklayın.</div>
    </div>
    <div id="context-menu">
        <button id="copy-node-name-button">İsmi Kopyala</button>
        <hr>
        <button id="expand-downstream-button">Aşağı Yönlü Genişlet (1 Seviye)</button>
        <button id="expand-upstream-button">Yukarı Yönlü Genişlet (1 Seviye)</button>
        <hr>
        <button id="expand-all-downstream-button">Tüm Aşağı Yönlüleri Göster</button>
        <button id="expand-all-upstream-button">Tüm Yukarı Yönlüleri Göster</button>
    </div>
</div>

<script type="text/javascript">
    // --- Yapılandırma ---
    const csvPath = 'lib/table_relations.csv';
    const nodeFixedSize = { widthPadding: 20, height: 35 };

    // --- Cytoscape.js Varsayılan Stil Tanımları ---
    const defaultCyStyle = [ /* ... Stil tanımlarınız değişmeden kalır ... */
        { selector: 'node', style: { 'background-color': '#cfe2ff', 'border-color': '#a6c9ff', 'border-width': 1.5, 'label': 'data(label)', 'text-valign': 'center', 'text-halign': 'center', 'font-size': '10px', 'color': '#212529', 'text-wrap': 'none', 'width': 'label', 'padding-left': nodeFixedSize.widthPadding / 2, 'padding-right': nodeFixedSize.widthPadding / 2, 'height': nodeFixedSize.height, 'shape': 'rectangle', } },
        { selector: 'node[label ENDS WITH ".STG_"], node[label BEGINS WITH "STG_"], node[label ENDS WITH ".stg_"], node[label BEGINS WITH "stg_"]', style: { 'background-color': '#e9ecef', 'border-color': '#adb5bd', } },
        { selector: 'node:selected', style: { 'border-color': '#e60000', 'border-width': 3, 'background-color': '#ffcccc', 'overlay-color': '#e60000', 'overlay-opacity': 0.25, 'overlay-padding': 8, 'z-index': 10 } },
        { selector: 'node[isStartNode="true"]', style: { 'border-width': 3.5, 'border-color': '#0056b3', 'font-weight': 'bold', 'shadow-color': '#007bff', 'shadow-opacity': 0.4, 'shadow-blur': 8, 'shadow-offset-x': 3, 'shadow-offset-y': 3 } },
        { selector: 'edge', style: { 'width': 1.5, 'line-color': '#ced4da', 'target-arrow-shape': 'triangle', 'target-arrow-color': '#ced4da', 'arrow-scale': 1, 'curve-style': 'bezier', 'z-index': 1 } },
        { selector: 'edge.highlighted-by-node', style: { 'line-color': '#e60000', 'target-arrow-color': '#e60000', 'width': 2.5, 'z-index': 5 } },
        { selector: 'edge:selected', style: { 'line-color': '#e60000', 'target-arrow-color': '#e60000', 'width': 3, 'overlay-color': '#e60000', 'overlay-opacity': 0.2, 'overlay-padding': 6, 'z-index': 9 } }
    ];

    // --- ElkJS Layout Temel Seçenekleri (Sabit Hiyerarşik) ---
    const elkLayoutOptionsBase = { /* ... ElkJS seçenekleriniz değişmeden kalır ... */
        name: 'elk', fit: true, padding: 60, animate: false,
        elk: {
            'elk.padding': '[top=60,left=60,bottom=60,right=60]', 'elk.spacing.nodeNode': 80,
            'elk.nodeLabels.placement': 'INSIDE', 'elk.nodeSize.constraints': 'NODE_LABELS MINIMUM_SIZE',
            'elk.nodeSize.options': `[minimumPadding=${nodeFixedSize.widthPadding/2}]`,
            'elk.nodeSize.minimum': `[width=${nodeFixedSize.widthPadding}, height=${nodeFixedSize.height}]`,
            algorithm: 'layered', 'elk.direction': 'RIGHT',
            'layered.spacing.nodeNodeBetweenLayers': 150, 'layered.spacing.edgeNodeBetweenLayers': 100,
            'layered.spacing.nodeNode': 40, 'elk.layered.cycleBreaking.strategy': 'GREEDY',
            'elk.edgeRouting': 'POLYLINE', 'elk.layered.mergeEdges': true, 'elk.separateConnectedComponents': false
        }
    };

    // --- Global Değişkenler ---
    let cy = null;
    let allNodesMasterData = new Map();
    let allEdgesMasterData = [];
    let outgoingEdgesMap = new Map();
    let incomingEdgesMap = new Map();
    let selectedStartNodes = new Set();
    let tagifyInstance = null;
    let contextNodeId = null;

    // --- DOM Element Referansları ---
    const graphContainer = document.getElementById('graph-container');
    const messageArea = document.getElementById('message-area');
    const nodeTagInput = document.getElementById('node-tag-input');
    const generateButton = document.getElementById('generate-button');
    const contextMenu = document.getElementById('context-menu');
    const copyNameButton = document.getElementById('copy-node-name-button');
    const displayLevelAllRadio = document.getElementById('level-all');
    const displayLevelDirectRadio = document.getElementById('level-direct');
    const expandDownstreamButton = document.getElementById('expand-downstream-button');
    const expandUpstreamButton = document.getElementById('expand-upstream-button');
    const expandAllDownstreamButton = document.getElementById('expand-all-downstream-button');
    const expandAllUpstreamButton = document.getElementById('expand-all-upstream-button');

    // --- Başlatma ---
    document.addEventListener('DOMContentLoaded', () => {
        // --- DEĞİŞİKLİK 1: KAPSAMLI ENGELLEME ---
        // TÜM SAYFADA tarayıcının varsayılan sağ tık menüsünü engelle.
        document.body.addEventListener('contextmenu', function(event) {
            // İstisna: INPUT, TEXTAREA gibi elemanlarda sağ tık çalışsın istenirse,
            // burada event.target kontrolü yapılabilir. Şimdilik her şeyi engelliyoruz.
            // if (!(event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA')) {
            //     event.preventDefault();
            // }
            console.log("Global document.body contextmenu event PREVENTED for target:", event.target);
            event.preventDefault();
        });
        // --- ---

        try {
            if (typeof cytoscape !== 'undefined' && typeof cytoscapeElk !== 'undefined') {
                cytoscape.use(cytoscapeElk); console.log("Cytoscape ElkJS eklentisi başarıyla kaydedildi.");
            } else {
                console.error("DEFER kullanılmasına rağmen gerekli kütüphaneler yüklenemedi!");
                setMessage("Uygulama başlatılamadı. Lütfen sayfayı yenileyin.", "error");
            }
        } catch (e) {
            console.error("Eklenti kaydedilirken hata oluştu:", e);
            setMessage("Uygulama başlatılırken bir hata oluştu.", "error");
            return;
        }

        setMessage("Veri yükleniyor...", "loading");
        generateButton.disabled = true;

        tagifyInstance = new Tagify(nodeTagInput, {
            dropdown: { maxItems: 15, enabled: 0, closeOnSelect: true, highlightFirst: true },
            enforceWhitelist: true, delimiters: ",|\t",
        });
        tagifyInstance.on('add', onTagAdd);
        tagifyInstance.on('remove', onTagRemove);

        loadAndProcessData();

        generateButton.addEventListener('click', handleGenerateButtonClick);
        copyNameButton.addEventListener('click', handleCopyName);
        expandDownstreamButton.addEventListener('click', () => handleExpandNodeContext('downstream', false));
        expandUpstreamButton.addEventListener('click', () => handleExpandNodeContext('upstream', false));
        expandAllDownstreamButton.addEventListener('click', () => handleExpandNodeContext('downstream', true));
        expandAllUpstreamButton.addEventListener('click', () => handleExpandNodeContext('upstream', true));

        // Özel menü açıkken, menü dışı bir yere sol tıklandığında özel menüyü kapat
        document.addEventListener('click', function(event) {
            if (contextMenu.style.display === 'block' && !contextMenu.contains(event.target)) {
                hideContextMenu();
            }
        }, true); // Capturing phase

    });

    // --- Tagify Olay İşleyicileri ---
    function onTagAdd(e) { selectedStartNodes.add(e.detail.data.value); generateButton.disabled = selectedStartNodes.size === 0; }
    function onTagRemove(e) { selectedStartNodes.delete(e.detail.data.value); generateButton.disabled = selectedStartNodes.size === 0; }

    // --- Mesaj Yönetimi Fonksiyonları ---
    function setMessage(text, type = "info") { messageArea.textContent = text; messageArea.className = type; showMessage(); }
    function hideMessage() { messageArea.classList.add("hidden"); }
    function showMessage() { messageArea.classList.remove("hidden"); }

    // --- Veri Yükleme ve Ön İşleme (Değişiklik yok) ---
    function loadAndProcessData() { /* ... */ }
    function preprocessData(data) { /* ... */ }
    function getNeighboringElements(startNodeId, direction, getAllLevels) { /* ... */ }
    function handleGenerateButtonClick() { /* ... */ }
    // Fonksiyonların içleri öncekiyle aynı, burada kısaltıldı.
    loadAndProcessData = function() {
         fetch(csvPath)
            .then(r => { if(!r.ok) throw new Error(`HTTP ${r.status}: ${csvPath} alınamadı.`); return r.text(); })
            .then(txt => {
                Papa.parse(txt, {
                    header: true, skipEmptyLines: true,
                    complete: (res) => {
                        if(res.errors.length > 0) console.warn("CSV Hataları:", res.errors);
                        if(res.data.length === 0) throw new Error("CSV boş veya geçersiz.");
                        preprocessData(res.data);
                        setMessage("Başlamak için tablo(lar) ekleyin ve 'Grafiği Oluştur'a tıklayın.");
                    },
                    error: (err) => { throw new Error("CSV Ayrıştırma Hatası: "+err.message); }
                });
            })
            .catch(handleError);
    };
    preprocessData = function(data) {
        console.log("Veri ön işleniyor...");
        allNodesMasterData.clear(); allEdgesMasterData = []; outgoingEdgesMap.clear(); incomingEdgesMap.clear();
        const edgesSet = new Set();
        data.forEach(row => {
            const source = row.source_table_name?.trim(); const target = row.target_table_name?.trim();
            if (source && target && source !== target) {
                const edgeKey = `${source}->${target}`;
                if (!edgesSet.has(edgeKey)) {
                    edgesSet.add(edgeKey); allEdgesMasterData.push({ from: source, to: target, id: edgeKey });
                    [source, target].forEach(nodeId => {
                        if (!allNodesMasterData.has(nodeId)) {
                            allNodesMasterData.set(nodeId, { id: nodeId, label: nodeId });
                        }
                    });
                    if (!outgoingEdgesMap.has(source)) outgoingEdgesMap.set(source, new Set()); outgoingEdgesMap.get(source).add({ from: source, to: target, id: edgeKey });
                    if (!incomingEdgesMap.has(target)) incomingEdgesMap.set(target, new Set()); incomingEdgesMap.get(target).add({ from: source, to: target, id: edgeKey });
                }
            }
        });
        console.log(`Ön işleme: ${allNodesMasterData.size} düğüm, ${allEdgesMasterData.length} kenar.`);
        if (tagifyInstance) { const sortedNodeIds = Array.from(allNodesMasterData.keys()).sort(); tagifyInstance.settings.whitelist = sortedNodeIds; console.log("Tagify whitelist güncellendi."); }
    };
    getNeighboringElements = function(startNodeId, direction, getAllLevels) {
        const newNodes = new Set();
        const newEdges = new Set();
        const mapToUse = direction === 'downstream' ? outgoingEdgesMap : incomingEdgesMap;
        const neighborKey = direction === 'downstream' ? 'to' : 'from';

        if (getAllLevels) {
            const queue = [startNodeId];
            const visited = new Set([startNodeId]);
            let head = 0;
            while(head < queue.length) {
                const currentId = queue[head++];
                if (mapToUse.has(currentId)) {
                    mapToUse.get(currentId).forEach(edgeObj => {
                        newEdges.add(edgeObj);
                        const neighborId = edgeObj[neighborKey];
                        newNodes.add(neighborId);
                        if (!visited.has(neighborId)) {
                            visited.add(neighborId);
                            queue.push(neighborId);
                        }
                    });
                }
            }
        } else {
            if (mapToUse.has(startNodeId)) {
                mapToUse.get(startNodeId).forEach(edgeObj => {
                    newEdges.add(edgeObj);
                    newNodes.add(edgeObj[neighborKey]);
                });
            }
        }
        newNodes.delete(startNodeId);
        return { nodes: Array.from(newNodes), edges: Array.from(newEdges) };
    };
    handleGenerateButtonClick = function() {
        const validStartNodeIds = Array.from(selectedStartNodes);
        if (validStartNodeIds.length === 0) { setMessage("Lütfen en az bir tablo ekleyin.", "error"); return; }
        setMessage("Grafik oluşturuluyor...", "loading");
        generateButton.disabled = true;

        setTimeout(() => {
            try {
                const combinedNodesSet = new Set();
                const combinedEdgesMap = new Map();
                const isDirectOnly = displayLevelDirectRadio.checked;

                validStartNodeIds.forEach(startId => {
                    combinedNodesSet.add(startId);
                    const downDeps = getNeighboringElements(startId, 'downstream', !isDirectOnly);
                    const upDeps = getNeighboringElements(startId, 'upstream', !isDirectOnly);

                    downDeps.nodes.forEach(n => combinedNodesSet.add(n));
                    downDeps.edges.forEach(eObj => combinedEdgesMap.set(eObj.id, eObj));
                    upDeps.nodes.forEach(n => combinedNodesSet.add(n));
                    upDeps.edges.forEach(eObj => combinedEdgesMap.set(eObj.id, eObj));
                });

                if (combinedNodesSet.size <= validStartNodeIds.length && combinedEdgesMap.size === 0 && validStartNodeIds.length > 0) {
                    setMessage(`Seçilenler (${validStartNodeIds.join(', ')}) için (${isDirectOnly ? 'doğrudan' : 'hiç'}) bağımlılık yok.`, "info");
                    if (cy) { cy.destroy(); cy = null; } showMessage(); generateButton.disabled = selectedStartNodes.size === 0; return;
                }
                 if (combinedNodesSet.size === 0 && validStartNodeIds.length > 0) {
                     setMessage(`Seçilen tablo(lar) (${validStartNodeIds.join(', ')}) veri setinde bulunamadı veya ilişkili değil.`, "error");
                    if (cy) { cy.destroy(); cy = null; } showMessage(); generateButton.disabled = selectedStartNodes.size === 0; return;
                 }
                  if (combinedNodesSet.size === 0) {
                     setMessage("Grafik oluşturmak için veri bulunamadı.", "error");
                    if (cy) { cy.destroy(); cy = null; } showMessage(); generateButton.disabled = selectedStartNodes.size === 0; return;
                 }

                const cyElements = [];
                combinedNodesSet.forEach(nodeId => {
                    const masterNodeData = allNodesMasterData.get(nodeId);
                    if (masterNodeData) {
                        cyElements.push({ group: 'nodes', data: { id: masterNodeData.id, label: masterNodeData.label, isStartNode: validStartNodeIds.includes(masterNodeData.id) } });
                    }
                });
                combinedEdgesMap.forEach(edgeObj => {
                    cyElements.push({ group: 'edges', data: { id: edgeObj.id, source: edgeObj.from, target: edgeObj.to } });
                });
                renderChainGraph(cyElements, validStartNodeIds);
            } catch (error) { handleError(error); }
            finally { generateButton.disabled = selectedStartNodes.size === 0; }
        }, 50);
    };


    function renderChainGraph(elements, startNodeIds) {
        console.log("Cytoscape grafiği oluşturuluyor...");
        if (cy) { cy.destroy(); cy = null; }
        const currentLayoutOptions = getCurrentCyLayoutOptions();
        cy = cytoscape({
            container: graphContainer, elements: elements, style: defaultCyStyle,
            layout: currentLayoutOptions, zoom: 1, pan: { x: 0, y: 0 },
            minZoom: 0.05, maxZoom: 5, wheelSensitivity: 2.0, selectionType: 'single',
        });
        cy.ready(() => {
            console.log("Cytoscape grafiği hazır.");
            cy.one('layoutstop', () => { /* ... layout bitişindeki kod değişmeden kalır ... */ });

            // --- DEĞİŞİKLİK 2: DÜĞÜM SAĞ TIK İŞLEYİCİSİ ---
            cy.on('cxttap', 'node', function(event) {
                // Tarayıcı menüsü zaten global olarak engellenmiş olmalı.
                // Ancak, Cytoscape'in kendi iç event'i için de preventDefault ve
                // özellikle stopPropagation çağırmak iyi bir pratiktir.
                if (event.originalEvent) { // Cytoscape 3.x için
                    event.originalEvent.preventDefault();
                    event.originalEvent.stopPropagation(); // Bu çok önemli! Olayın daha fazla yayılmasını engeller.
                } else { // Cytoscape 2.x veya originalEvent yoksa (düşük ihtimal)
                    event.preventDefault();
                    event.stopPropagation();
                }
                console.log('Node cxttap: DOM event prevented and propagation stopped. Showing custom menu.');
                handleRightClickCy(event); // Özel menüyü göster
            });
            // --- ---

            // Cytoscape'in boş alanına sol tıklandığında özel menüyü gizle
            cy.on('tap', function(event){
                 if( event.target === cy ){
                    hideContextMenu();
                 }
            });
            cy.on('select', 'node', handleNodeSelect);
            cy.on('unselect', 'node', handleNodeUnselect);
        });
        function handleNodeSelect(event) { event.target.connectedEdges().addClass('highlighted-by-node'); }
        function handleNodeUnselect(event) { cy.edges('.highlighted-by-node').removeClass('highlighted-by-node'); }
        console.log("Cytoscape örneği oluşturuldu, layout bekleniyor...");
    }

    // Context menüden çağrılan genişletme fonksiyonları (Değişiklik yok)
    function handleExpandNodeContext(direction, expandAll = false) { /* ... */ }
    function handleActualExpand(nodeIdToExpand, direction, expandAll) { /* ... */ }
    function updateNetworkLayout(hideMsgAfter = true) { /* ... */ }
    handleExpandNodeContext = function(direction, expandAll = false) {
        if (!contextNodeId || !cy) return;
        handleActualExpand(contextNodeId, direction, expandAll);
    };
    handleActualExpand = function(nodeIdToExpand, direction, expandAll) {
        hideContextMenu();
        console.log(`handleActualExpand çağrıldı: nodeIdToExpand=${nodeIdToExpand}, direction=${direction}, expandAll=${expandAll}`);

        const { nodes: newNodesFound, edges: newEdgesFoundObjects } = getNeighboringElements(nodeIdToExpand, direction, expandAll);

        const elementsToAdd = [];
        let addedNodeCount = 0;
        let addedEdgeCount = 0;

        newNodesFound.forEach(nodeId => {
            if (cy.getElementById(nodeId).empty()) {
                const masterNodeData = allNodesMasterData.get(nodeId);
                if (masterNodeData) {
                    elementsToAdd.push({ group: 'nodes', data: { id: masterNodeData.id, label: masterNodeData.label, isStartNode: false } });
                    addedNodeCount++;
                }
            }
        });
        newEdgesFoundObjects.forEach(edgeObj => {
            if (cy.getElementById(edgeObj.id).empty()) {
                const sourceExists = !cy.getElementById(edgeObj.from).empty() || newNodesFound.includes(edgeObj.from);
                const targetExists = !cy.getElementById(edgeObj.to).empty() || newNodesFound.includes(edgeObj.to);

                if (sourceExists && targetExists) {
                    elementsToAdd.push({ group: 'edges', data: { id: edgeObj.id, source: edgeObj.from, target: edgeObj.to } });
                    addedEdgeCount++;
                }
            }
        });

        if (elementsToAdd.length > 0) {
            setMessage("Grafik güncelleniyor...", "loading");
            cy.add(elementsToAdd);
            console.log(`${addedNodeCount} yeni düğüm, ${addedEdgeCount} yeni kenar eklendi.`);
            updateNetworkLayout(true);
        } else {
            console.log("Genişletilecek yeni eleman bulunamadı.");
            setMessage(`"${nodeIdToExpand}" için daha fazla ${direction === 'downstream' ? 'aşağı yönlü' : 'yukarı yönlü'} ${!expandAll ? 'doğrudan' : ''} bağımlılık bulunamadı.`, "info");
            setTimeout(hideMessage, 3000);
        }
    };
     updateNetworkLayout = function(hideMsgAfter = true) {
        if (!cy || cy.elements().empty()) { if (hideMsgAfter) hideMessage(); return; }
        console.log("Layout yeniden düzenleniyor...");
        const layoutOptions = getCurrentCyLayoutOptions();
        if (!messageArea.classList.contains('loading')) { setMessage("Düzen güncelleniyor...", "loading"); }
        const layout = cy.layout(layoutOptions);
        layout.pon('layoutstop').then(function(event){
            console.log("Layout güncellendi.");
            const targetNodeToCenter = contextNodeId ? cy.getElementById(contextNodeId) : (selectedStartNodes.size > 0 ? cy.getElementById(Array.from(selectedStartNodes)[0]) : null);
            if (targetNodeToCenter && targetNodeToCenter.length > 0 && targetNodeToCenter.visible()) {
                 cy.animate({
                    fit: { eles: cy.elements(':visible'), padding: 80 },
                    center: { eles: targetNodeToCenter },
                    duration: 400
                }).play();
            } else {
                 cy.fit(cy.elements(':visible'), 80);
            }
            if (hideMsgAfter) hideMessage();
        });
        layout.run();
    };


    function getCurrentCyLayoutOptions() { return elkLayoutOptionsBase; }

    // --- DEĞİŞİKLİK 3: handleRightClickCy ---
    // Bu fonksiyon artık preventDefault çağırmaz. Sadece menüyü gösterir.
    function handleRightClickCy(event) {
        hideContextMenu(); // Önceki açık menüyü gizle

        const targetNode = event.target;
        if (!targetNode || typeof targetNode.id !== 'function' || !targetNode.isNode()) {
            console.warn("handleRightClickCy: Hedef geçerli bir düğüm değil.");
            return; // Düğüm değilse özel menü gösterme
        }
        contextNodeId = targetNode.id();
        const renderedPosition = event.renderedPosition || event.position;

        // Menü pozisyonlama (ekran dışına taşmayı engellemek için, önceki gibi detaylı olabilir)
        const menuWidth = contextMenu.offsetWidth || 280;
        const menuHeight = contextMenu.offsetHeight || contextMenu.scrollHeight || 200;
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        let left = renderedPosition.x;
        let top = renderedPosition.y;
        if (left + menuWidth > viewportWidth - 10) left = viewportWidth - menuWidth - 10;
        if (top + menuHeight > viewportHeight - 10) top = viewportHeight - menuHeight - 10;
        if (left < 10) left = 10;
        if (top < 10) top = 10;

        contextMenu.style.top = `${top}px`;
        contextMenu.style.left = `${left}px`;
        contextMenu.style.display = 'block';
        console.log("Özel context menü açıldı (handleRightClickCy):", contextNodeId);
    }
    // --- ---

    function hideContextMenu() {
        if (contextMenu.style.display === 'block') {
            contextMenu.style.display = 'none';
            contextNodeId = null;
        }
    }
    function copyTextFallback(text) { /* ... (Değişiklik yok) ... */ }
    function handleCopyName() { /* ... (Değişiklik yok) ... */ }
    function handleError(error) { /* ... (Değişiklik yok) ... */ }
    // Kısaltılmış fonksiyonlar tekrar tam halleriyle
    copyTextFallback=text=>{const e=document.createElement("textarea");e.style.position="fixed",e.style.top="-9999px",e.style.left="-9999px",e.value=text,document.body.appendChild(e),e.focus(),e.select();let o=!1;try{o=document.execCommand("copy")}catch(t){o=!1}finally{document.body.removeChild(e)}return o};handleCopyName=()=>{contextNodeId&&cy&&(()=>{const e=cy.getElementById(contextNodeId).id(),o=()=>{const t=copyNameButton.textContent;copyNameButton.textContent="Kopyalandı!",setTimeout(()=>{copyNameButton.textContent=t},1500)};navigator.clipboard&&window.isSecureContext?navigator.clipboard.writeText(e).then(o).catch(()=>{copyTextFallback(e)?o():alert("Panoya kopyalanamadı.")}):copyTextFallback(e)?o():alert("Panoya kopyalanamadı.")})(),hideContextMenu()};handleError=e=>{console.error("Hata:",e),setMessage(`Hata: ${e.message||"Bilinmeyen bir hata oluştu."}`,"error"),showMessage(),cy&&(cy.destroy(),cy=null),generateButton.disabled=0===selectedStartNodes.size};


</script>

</body>
</html>
